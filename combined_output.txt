C:\Users\Kamran\kamran-aws-project\.gitignore
---------------------------------------------
# ==========================================
# AWS DevOps Project - .gitignore
# ==========================================

# ========== CRITICAL SECURITY FILES ==========
# NEVER commit these files - they contain sensitive data

# AWS Credentials
.aws/
*.pem
*.ppk
aws-credentials.txt
credentials
config

# SSH Keys
id_rsa
id_rsa.pub
*.key
*.crt
key-pairs/

# Terraform State Files (Contains sensitive data)
*.tfstate
*.tfstate.*
*.tfstate.backup
terraform.tfvars
terraform.tfvars.json
.terraform/
.terraform.lock.hcl
crash.log
crash.*.log

# Environment Variables with Secrets
.env
.env.local
.env.production
.env.development
docker/.env

# Database dumps and backups
*.sql
*.dump
backup/
dumps/

# ========== APPLICATION FILES ==========

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# React Build
build/
dist/
.DS_Store

# Logs
logs/
*.log
log/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# ========== IDE AND EDITOR FILES ==========

# VSCode
.vscode/
*.code-workspace

# IntelliJ IDEA
.idea/
*.iml
*.iws

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# ========== OPERATING SYSTEM FILES ==========

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon?

# Linux
*~
.nfs*

# ========== TEMPORARY FILES ==========

# Temporary directories
tmp/
temp/
.tmp/

# Cache directories
.cache/
.parcel-cache/

# ========== DOCKER ==========

# Docker volumes and data
docker-data/
volumes/

# ========== DOCUMENTATION ==========

# Large media files (use Git LFS instead)
*.mp4
*.avi
*.mov
*.wmv

# Personal notes
notes.txt
TODO.txt
personal/

# ========== SAFE TO INCLUDE ==========
# These files are safe and should be committed:

# !README.md
# !.env.example
# !docker-compose.yml
# !Dockerfile
# !*.tf
# !*.sh
# !package.json

# ==========================================
# End of .gitignore
# ==========================================

C:\Users\Kamran\kamran-aws-project\.terraform.lock.hcl
---------------------------------------------
# This file is maintained automatically by "terraform init".
# Manual edits may be lost in future updates.

provider "registry.terraform.io/hashicorp/aws" {
  version     = "5.99.1"
  constraints = "~> 5.0"
  hashes = [
    "h1:atjIGE0AtiuzUl6VF8ttGpVdQ583uBslxmIn0A/egyA=",
    "zh:00b0a61c6d295300f0aa7a79a7d40e9f836164f1fff816d38324c148cd846887",
    "zh:1ee9d5ccb67378704642db62113ac6c0d56d69408a9c1afb9a8e14b095fc0733",
    "zh:2035977ed418dcb18290785c1eeb79b7133b39f718c470346e043ac48887ffc7",
    "zh:67e3ca1bf7061900f81cf958d5c771a2fd6048c2b185bec7b27978349b173a90",
    "zh:87fadbe5de7347ede72ad879ff8d8d9334103cd9aa4a321bb086bfac91654944",
    "zh:901d170c457c2bff244a2282d9de595bdb3ebecc33a2034c5ce8aafbcff66db9",
    "zh:92c07d6cf530679565b87934f9f98604652d787968cce6a3d24c148479b7e34b",
    "zh:9b12af85486a96aedd8d7984b0ff811a4b42e3d88dad1a3fb4c0b580d04fa425",
    "zh:a7d4803b4c5ff17f029f8b270c91480442ece27cec7922c38548bcfea2ac2d26",
    "zh:afda848da7993a07d29018ec25ab6feda652e01d4b22721da570ce4fcc005292",
    "zh:baaf16c98b81bad070e0908f057a97108ecd6e8c9f754d7a79b18df4c8453279",
    "zh:c3dd496c5014427599d6b6b1c14c7ebb09a15df78918ae0be935e7bfa83b894c",
    "zh:e2b84c1d40b3f2c4b1d74bf170b9e932983b61bac0e6dab2e36f5057ddcc997f",
    "zh:e49c92cb29c53b4573ed4d9c946486e6bcfc1b63f1aee0c79cc7626f3d9add03",
    "zh:efae8e339c4b13f546e0f96c42eb95bf8347de22e941594849b12688574bf380",
  ]
}


C:\Users\Kamran\kamran-aws-project\alb.tf
---------------------------------------------
# Application Load Balancer
resource "aws_lb" "main" {
  name               = "kamran-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb.id]
  subnets            = aws_subnet.public[*].id

  enable_deletion_protection = false

  tags = {
    Name = "kamran-alb"
  }
}

# SSL Certificate
resource "aws_acm_certificate" "main" {
  domain_name       = var.domain_name
  subject_alternative_names = ["*.${var.domain_name}"]
  validation_method = "DNS"

  lifecycle {
    create_before_destroy = true
  }

  tags = {
    Name = "kamran-cert"
  }
}

# Certificate Validation
resource "aws_acm_certificate_validation" "main" {
  certificate_arn         = aws_acm_certificate.main.arn
  validation_record_fqdns = [for record in aws_route53_record.cert_validation : record.fqdn]
}

# ALB Listener (HTTP -> HTTPS Redirect)
resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.main.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

# ALB Listener (HTTPS)
resource "aws_lb_listener" "https" {
  load_balancer_arn = aws_lb.main.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-TLS-1-2-2017-01"
  certificate_arn   = aws_acm_certificate_validation.main.certificate_arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.app.arn
  }
}

C:\Users\Kamran\kamran-aws-project\ec2.tf
---------------------------------------------
# AMI Data Source
data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["al2023-ami-*-x86_64"]
  }
}

# Launch Template for Application Servers
resource "aws_launch_template" "app" {
  name_prefix   = "kamran-app-"
  image_id      = data.aws_ami.amazon_linux.id
  instance_type = "t2.micro"
  key_name      = var.key_name

  vpc_security_group_ids = [aws_security_group.ec2.id]

  user_data = base64encode(templatefile("${path.module}/user_data/app_userdata.sh", {
    github_repo    = var.github_repo
    pg_host        = aws_db_instance.postgresql.endpoint
    pg_database    = aws_db_instance.postgresql.db_name
    pg_user        = var.db_username
    pg_password    = var.db_password
    mysql_host     = aws_db_instance.mysql.endpoint
    mysql_database = aws_db_instance.mysql.db_name
    mysql_user     = var.db_username
    mysql_password = var.db_password
  }))

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = "kamran-app-instance"
    }
  }
}

# Auto Scaling Group for Application Servers
resource "aws_autoscaling_group" "app" {
  name                = "kamran-app-asg"
  vpc_zone_identifier = aws_subnet.public[*].id
  target_group_arns   = [aws_lb_target_group.app.arn]
  health_check_type   = "ELB"
  health_check_grace_period = 600    # Changed from 300 (default)
  min_size            = 2
  max_size            = 3
  desired_capacity    = 2

  launch_template {
    id      = aws_launch_template.app.id
    version = "$Latest"
  }

  tag {
    key                 = "Name"
    value               = "kamran-app-asg"
    propagate_at_launch = false
  }
}

# BI Tool Instance
resource "aws_instance" "bi_tool" {
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.public[0].id
  key_name               = var.key_name
  vpc_security_group_ids = [aws_security_group.ec2.id]

  user_data = base64encode(templatefile("${path.module}/user_data/bi_userdata.sh", {
    db_host     = aws_db_instance.postgresql.endpoint
    db_username = var.db_username
    db_password = var.db_password
  }))

  tags = {
    Name = "kamran-bi-tool"
  }
}

C:\Users\Kamran\kamran-aws-project\main.tf
---------------------------------------------
terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Get availability zones
data "aws_availability_zones" "available" {
  state = "available"
}

# Get Route53 hosted zone
data "aws_route53_zone" "main" {
  name         = var.domain_name
  private_zone = false
}

C:\Users\Kamran\kamran-aws-project\outputs.tf
---------------------------------------------
output "alb_dns_name" {
  description = "DNS name of the load balancer"
  value       = aws_lb.main.dns_name
}

output "app_url" {
  description = "Application URL"
  value       = "https://app.${var.domain_name}"
}

output "bi_tool_url" {
  description = "BI Tool URL"
  value       = "http://bi.${var.domain_name}:5000"
}

output "mysql_endpoint" {
  description = "MySQL RDS endpoint"
  value       = aws_db_instance.mysql.endpoint
  sensitive   = true
}

output "postgresql_endpoint" {
  description = "PostgreSQL RDS endpoint"
  value       = aws_db_instance.postgresql.endpoint
  sensitive   = true
}

output "bi_tool_public_ip" {
  description = "BI Tool instance public IP"
  value       = aws_instance.bi_tool.public_ip
}

C:\Users\Kamran\kamran-aws-project\rds.tf
---------------------------------------------
# RDS MySQL Instance
resource "aws_db_instance" "mysql" {
  identifier     = "kamran-mysql"
  engine         = "mysql"
  engine_version = "8.0"
  instance_class = "db.t3.micro"
  
  allocated_storage     = 20
  max_allocated_storage = 100
  storage_type          = "gp2"
  storage_encrypted     = true

  db_name  = "kamranmysqldb"
  username = var.db_username
  password = var.db_password

  vpc_security_group_ids = [aws_security_group.rds_mysql.id]
  db_subnet_group_name   = aws_db_subnet_group.main.name

  backup_retention_period = 7
  backup_window          = "03:00-04:00"
  maintenance_window     = "sun:04:00-sun:05:00"

  skip_final_snapshot = true
  deletion_protection = false

  tags = {
    Name = "kamran-mysql"
  }
}

# RDS PostgreSQL Instance
resource "aws_db_instance" "postgresql" {
  identifier     = "kamran-postgresql"
  engine         = "postgres"
  engine_version = "14"
  instance_class = "db.t3.micro"
  
  allocated_storage     = 20
  max_allocated_storage = 100
  storage_type          = "gp2"
  storage_encrypted     = true

  db_name  = "kamranpgdb"
  username = var.db_username
  password = var.db_password

  vpc_security_group_ids = [aws_security_group.rds_postgresql.id]
  db_subnet_group_name   = aws_db_subnet_group.main.name

  backup_retention_period = 7
  backup_window          = "03:00-04:00"
  maintenance_window     = "sun:04:00-sun:05:00"

  skip_final_snapshot = true
  deletion_protection = false

  tags = {
    Name = "kamran-postgresql"
  }
}

C:\Users\Kamran\kamran-aws-project\README.md
---------------------------------------------
# kamran-aws-project

C:\Users\Kamran\kamran-aws-project\route53.tf
---------------------------------------------
# Route53 Record for ALB
resource "aws_route53_record" "app" {
  zone_id = data.aws_route53_zone.main.zone_id
  name    = "app.${var.domain_name}"
  type    = "A"

  alias {
    name                   = aws_lb.main.dns_name
    zone_id                = aws_lb.main.zone_id
    evaluate_target_health = true
  }
}

# Route53 Record for BI Tool
resource "aws_route53_record" "bi" {
  zone_id = data.aws_route53_zone.main.zone_id
  name    = "bi.${var.domain_name}"
  type    = "A"
  ttl     = 300
  records = [aws_instance.bi_tool.public_ip]
}

# Certificate Validation Records
resource "aws_route53_record" "cert_validation" {
  for_each = {
    for dvo in aws_acm_certificate.main.domain_validation_options : dvo.domain_name => {
      name   = dvo.resource_record_name
      record = dvo.resource_record_value
      type   = dvo.resource_record_type
    }
  }

  allow_overwrite = true
  name            = each.value.name
  records         = [each.value.record]
  ttl             = 60
  type            = each.value.type
  zone_id         = data.aws_route53_zone.main.zone_id
}

C:\Users\Kamran\kamran-aws-project\security_groups.tf
---------------------------------------------
# ALB Security Group
resource "aws_security_group" "alb" {
  name        = "kamran-alb-sg"
  description = "Security group for Application Load Balancer"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "kamran-alb-sg"
  }
}

# EC2 Security Group
resource "aws_security_group" "ec2" {
  name        = "kamran-ec2-sg"
  description = "Security group for EC2 instances"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb.id]
  }

  ingress {
    from_port       = 3000
    to_port         = 3000
    protocol        = "tcp"
    security_groups = [aws_security_group.alb.id]
  }

  ingress {
    from_port       = 5000
    to_port         = 5000
    protocol        = "tcp"
    security_groups = [aws_security_group.alb.id]
  }

  ingress {
    from_port   = 5000
    to_port     = 5000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "kamran-ec2-sg"
  }
}

# RDS MySQL Security Group
resource "aws_security_group" "rds_mysql" {
  name        = "kamran-rds-mysql-sg"
  description = "Security group for RDS MySQL"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.ec2.id]
  }

  tags = {
    Name = "kamran-rds-mysql-sg"
  }
}

# RDS PostgreSQL Security Group
resource "aws_security_group" "rds_postgresql" {
  name        = "kamran-rds-postgresql-sg"
  description = "Security group for RDS PostgreSQL"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = [aws_security_group.ec2.id]
  }

  tags = {
    Name = "kamran-rds-postgresql-sg"
  }
}

C:\Users\Kamran\kamran-aws-project\target_group.tf
---------------------------------------------
# Target Group for Application
resource "aws_lb_target_group" "app" {
  name     = "kamran-app-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id

  health_check {
    enabled             = true
    healthy_threshold   = 2
    interval            = 30
    matcher             = "200"
    path                = "/"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 15
    unhealthy_threshold = 5
  }

  tags = {
    Name = "kamran-app-tg"
  }
}

C:\Users\Kamran\kamran-aws-project\terraform.tfstate
---------------------------------------------
{
  "version": 4,
  "terraform_version": "1.11.4",
  "serial": 119,
  "lineage": "c73ba255-1d62-de64-27ff-f8c935b5f38e",
  "outputs": {
    "alb_dns_name": {
      "value": "kamran-alb-2032215410.us-east-1.elb.amazonaws.com",
      "type": "string"
    },
    "app_url": {
      "value": "https://app.kamranshahid.com",
      "type": "string"
    },
    "bi_tool_public_ip": {
      "value": "3.216.79.94",
      "type": "string"
    },
    "bi_tool_url": {
      "value": "http://bi.kamranshahid.com:5000",
      "type": "string"
    },
    "mysql_endpoint": {
      "value": "kamran-mysql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:3306",
      "type": "string",
      "sensitive": true
    },
    "postgresql_endpoint": {
      "value": "kamran-postgresql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:5432",
      "type": "string",
      "sensitive": true
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "amazon_linux",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0b715af88ed6bff62",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "3000",
                  "snapshot_id": "snap-073ba3c25841a1789",
                  "throughput": "125",
                  "volume_initialization_rate": "0",
                  "volume_size": "2",
                  "volume_type": "gp3"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "boot_mode": "uefi-preferred",
            "creation_date": "2025-05-30T18:46:05.000Z",
            "deprecation_time": "2025-08-28T18:46:00.000Z",
            "description": "Amazon Linux 2023 AMI 2023.7.20250527.1 x86_64 Minimal HVM kernel-6.1",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "al2023-ami-*-x86_64"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0b715af88ed6bff62",
            "image_id": "ami-0b715af88ed6bff62",
            "image_location": "amazon/al2023-ami-minimal-2023.7.20250527.1-kernel-6.1-x86_64",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "v2.0",
            "include_deprecated": false,
            "kernel_id": "",
            "last_launched_time": "",
            "most_recent": true,
            "name": "al2023-ami-minimal-2023.7.20250527.1-kernel-6.1-x86_64",
            "name_regex": null,
            "owner_id": "137112412989",
            "owners": [
              "amazon"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-073ba3c25841a1789",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "uefi_data": null,
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_availability_zones",
      "name": "available",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "all_availability_zones": null,
            "exclude_names": null,
            "exclude_zone_ids": null,
            "filter": null,
            "group_names": [
              "us-east-1-zg-1"
            ],
            "id": "us-east-1",
            "names": [
              "us-east-1a",
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-east-1f"
            ],
            "state": "available",
            "timeouts": null,
            "zone_ids": [
              "use1-az1",
              "use1-az2",
              "use1-az4",
              "use1-az6",
              "use1-az3",
              "use1-az5"
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_route53_zone",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:route53:::hostedzone/Z04719493S7AFET22CBPC",
            "caller_reference": "9ec46f9f-1179-41b5-a9ac-6f478ca747ef",
            "comment": "",
            "id": "Z04719493S7AFET22CBPC",
            "linked_service_description": null,
            "linked_service_principal": null,
            "name": "kamranshahid.com",
            "name_servers": [
              "ns-609.awsdns-12.net",
              "ns-232.awsdns-29.com",
              "ns-1928.awsdns-49.co.uk",
              "ns-1132.awsdns-13.org"
            ],
            "primary_name_server": "ns-609.awsdns-12.net",
            "private_zone": false,
            "resource_record_set_count": 5,
            "tags": {},
            "vpc_id": null,
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_acm_certificate",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "certificate_authority_arn": "",
            "certificate_body": null,
            "certificate_chain": null,
            "domain_name": "kamranshahid.com",
            "domain_validation_options": [
              {
                "domain_name": "*.kamranshahid.com",
                "resource_record_name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com.",
                "resource_record_type": "CNAME",
                "resource_record_value": "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
              },
              {
                "domain_name": "kamranshahid.com",
                "resource_record_name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com.",
                "resource_record_type": "CNAME",
                "resource_record_value": "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
              }
            ],
            "early_renewal_duration": "",
            "id": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "key_algorithm": "RSA_2048",
            "not_after": "2026-07-05T23:59:59Z",
            "not_before": "2025-06-06T00:00:00Z",
            "options": [
              {
                "certificate_transparency_logging_preference": "ENABLED"
              }
            ],
            "pending_renewal": false,
            "private_key": null,
            "renewal_eligibility": "ELIGIBLE",
            "renewal_summary": [],
            "status": "ISSUED",
            "subject_alternative_names": [
              "*.kamranshahid.com",
              "kamranshahid.com"
            ],
            "tags": {
              "Name": "kamran-cert"
            },
            "tags_all": {
              "Name": "kamran-cert"
            },
            "type": "AMAZON_ISSUED",
            "validation_emails": [],
            "validation_method": "DNS",
            "validation_option": []
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key"
              }
            ]
          ],
          "private": "bnVsbA==",
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_acm_certificate_validation",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "certificate_arn": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "id": "2025-06-06 01:19:01.632 +0000 UTC",
            "timeouts": null,
            "validation_record_fqdns": [
              "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo0NTAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_acm_certificate.main",
            "aws_route53_record.cert_validation",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_autoscaling_group",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:autoscaling:us-east-1:761018894071:autoScalingGroup:6dac60ae-aa80-4f6d-9f1a-d374bccfe441:autoScalingGroupName/kamran-app-asg",
            "availability_zone_distribution": [
              {
                "capacity_distribution_strategy": "balanced-best-effort"
              }
            ],
            "availability_zones": [
              "us-east-1a",
              "us-east-1b"
            ],
            "capacity_rebalance": false,
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "default",
                "capacity_reservation_target": []
              }
            ],
            "context": "",
            "default_cooldown": 300,
            "default_instance_warmup": 0,
            "desired_capacity": 2,
            "desired_capacity_type": "",
            "enabled_metrics": [],
            "force_delete": false,
            "force_delete_warm_pool": false,
            "health_check_grace_period": 600,
            "health_check_type": "ELB",
            "id": "kamran-app-asg",
            "ignore_failed_scaling_activities": false,
            "initial_lifecycle_hook": [],
            "instance_maintenance_policy": [],
            "instance_refresh": [],
            "launch_configuration": "",
            "launch_template": [
              {
                "id": "lt-053d03c19988fd023",
                "name": "kamran-app-20250606012554320400000004",
                "version": "$Latest"
              }
            ],
            "load_balancers": [],
            "max_instance_lifetime": 0,
            "max_size": 3,
            "metrics_granularity": "1Minute",
            "min_elb_capacity": null,
            "min_size": 2,
            "mixed_instances_policy": [],
            "name": "kamran-app-asg",
            "name_prefix": "",
            "placement_group": "",
            "predicted_capacity": 0,
            "protect_from_scale_in": false,
            "service_linked_role_arn": "arn:aws:iam::761018894071:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
            "suspended_processes": [],
            "tag": [
              {
                "key": "Name",
                "propagate_at_launch": false,
                "value": "kamran-app-asg"
              }
            ],
            "target_group_arns": [
              "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c"
            ],
            "termination_policies": [],
            "timeouts": null,
            "traffic_source": [
              {
                "identifier": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
                "type": "elbv2"
              }
            ],
            "vpc_zone_identifier": [
              "subnet-03cf176be4a0d4ab9",
              "subnet-0ab815f44992f5081"
            ],
            "wait_for_capacity_timeout": "10m",
            "wait_for_elb_capacity": null,
            "warm_pool": [],
            "warm_pool_size": 0
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjo2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_db_instance.mysql",
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_launch_template.app",
            "aws_lb_target_group.app",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_mysql",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "mysql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "address": "kamran-mysql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com",
            "allocated_storage": 20,
            "allow_major_version_upgrade": null,
            "apply_immediately": false,
            "arn": "arn:aws:rds:us-east-1:761018894071:db:kamran-mysql",
            "auto_minor_version_upgrade": true,
            "availability_zone": "us-east-1a",
            "backup_retention_period": 7,
            "backup_target": "region",
            "backup_window": "03:00-04:00",
            "blue_green_update": [],
            "ca_cert_identifier": "rds-ca-rsa2048-g1",
            "character_set_name": "",
            "copy_tags_to_snapshot": false,
            "custom_iam_instance_profile": "",
            "customer_owned_ip_enabled": false,
            "database_insights_mode": "standard",
            "db_name": "kamranmysqldb",
            "db_subnet_group_name": "kamran-db-subnet-group",
            "dedicated_log_volume": false,
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "",
            "domain_auth_secret_arn": "",
            "domain_dns_ips": [],
            "domain_fqdn": "",
            "domain_iam_role_name": "",
            "domain_ou": "",
            "enabled_cloudwatch_logs_exports": [],
            "endpoint": "kamran-mysql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:3306",
            "engine": "mysql",
            "engine_lifecycle_support": "open-source-rds-extended-support",
            "engine_version": "8.0",
            "engine_version_actual": "8.0.41",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "Z2R2ITUGPM61AM",
            "iam_database_authentication_enabled": false,
            "id": "db-MEKD46BX5FDNS3RETDZCGR62T4",
            "identifier": "kamran-mysql",
            "identifier_prefix": "",
            "instance_class": "db.t3.micro",
            "iops": 0,
            "kms_key_id": "arn:aws:kms:us-east-1:761018894071:key/de731e04-a95e-4243-b347-9b763b838168",
            "latest_restorable_time": "2025-06-06T01:50:00Z",
            "license_model": "general-public-license",
            "listener_endpoint": [],
            "maintenance_window": "sun:04:00-sun:05:00",
            "manage_master_user_password": null,
            "master_user_secret": [],
            "master_user_secret_kms_key_id": null,
            "max_allocated_storage": 100,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "nchar_character_set_name": "",
            "network_type": "IPV4",
            "option_group_name": "default:mysql-8-0",
            "parameter_group_name": "default.mysql8.0",
            "password": "Password123!",
            "password_wo": null,
            "password_wo_version": null,
            "performance_insights_enabled": false,
            "performance_insights_kms_key_id": "",
            "performance_insights_retention_period": 0,
            "port": 3306,
            "publicly_accessible": false,
            "replica_mode": "",
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-MEKD46BX5FDNS3RETDZCGR62T4",
            "restore_to_point_in_time": [],
            "s3_import": [],
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": true,
            "storage_throughput": 0,
            "storage_type": "gp2",
            "tags": {
              "Name": "kamran-mysql"
            },
            "tags_all": {
              "Name": "kamran-mysql"
            },
            "timeouts": null,
            "timezone": "",
            "upgrade_storage_config": null,
            "username": "kamranuser",
            "vpc_security_group_ids": [
              "sg-098a54c61de626934"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "password_wo"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NDgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_mysql",
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "postgresql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "address": "kamran-postgresql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com",
            "allocated_storage": 20,
            "allow_major_version_upgrade": null,
            "apply_immediately": false,
            "arn": "arn:aws:rds:us-east-1:761018894071:db:kamran-postgresql",
            "auto_minor_version_upgrade": true,
            "availability_zone": "us-east-1a",
            "backup_retention_period": 7,
            "backup_target": "region",
            "backup_window": "03:00-04:00",
            "blue_green_update": [],
            "ca_cert_identifier": "rds-ca-rsa2048-g1",
            "character_set_name": "",
            "copy_tags_to_snapshot": false,
            "custom_iam_instance_profile": "",
            "customer_owned_ip_enabled": false,
            "database_insights_mode": "standard",
            "db_name": "kamranpgdb",
            "db_subnet_group_name": "kamran-db-subnet-group",
            "dedicated_log_volume": false,
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "",
            "domain_auth_secret_arn": "",
            "domain_dns_ips": [],
            "domain_fqdn": "",
            "domain_iam_role_name": "",
            "domain_ou": "",
            "enabled_cloudwatch_logs_exports": [],
            "endpoint": "kamran-postgresql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:5432",
            "engine": "postgres",
            "engine_lifecycle_support": "open-source-rds-extended-support",
            "engine_version": "14",
            "engine_version_actual": "14.17",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "Z2R2ITUGPM61AM",
            "iam_database_authentication_enabled": false,
            "id": "db-UHJB7TN6XKFMHBCPJMNXDZDVPE",
            "identifier": "kamran-postgresql",
            "identifier_prefix": "",
            "instance_class": "db.t3.micro",
            "iops": 0,
            "kms_key_id": "arn:aws:kms:us-east-1:761018894071:key/de731e04-a95e-4243-b347-9b763b838168",
            "latest_restorable_time": "2025-06-06T01:47:12Z",
            "license_model": "postgresql-license",
            "listener_endpoint": [],
            "maintenance_window": "sun:04:00-sun:05:00",
            "manage_master_user_password": null,
            "master_user_secret": [],
            "master_user_secret_kms_key_id": null,
            "max_allocated_storage": 100,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "nchar_character_set_name": "",
            "network_type": "IPV4",
            "option_group_name": "default:postgres-14",
            "parameter_group_name": "default.postgres14",
            "password": "Password123!",
            "password_wo": null,
            "password_wo_version": null,
            "performance_insights_enabled": false,
            "performance_insights_kms_key_id": "",
            "performance_insights_retention_period": 0,
            "port": 5432,
            "publicly_accessible": false,
            "replica_mode": "",
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-UHJB7TN6XKFMHBCPJMNXDZDVPE",
            "restore_to_point_in_time": [],
            "s3_import": [],
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": true,
            "storage_throughput": 0,
            "storage_type": "gp2",
            "tags": {
              "Name": "kamran-postgresql"
            },
            "tags_all": {
              "Name": "kamran-postgresql"
            },
            "timeouts": null,
            "timezone": "",
            "upgrade_storage_config": null,
            "username": "kamranuser",
            "vpc_security_group_ids": [
              "sg-013170aff4546e079"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "password_wo"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NDgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_subnet_group",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:rds:us-east-1:761018894071:subgrp:kamran-db-subnet-group",
            "description": "Managed by Terraform",
            "id": "kamran-db-subnet-group",
            "name": "kamran-db-subnet-group",
            "name_prefix": "",
            "subnet_ids": [
              "subnet-09a5a96b6c798cabb",
              "subnet-0aa6bf003153fb982"
            ],
            "supported_network_types": [
              "IPV4"
            ],
            "tags": {
              "Name": "kamran-db-subnet-group"
            },
            "tags_all": {
              "Name": "kamran-db-subnet-group"
            },
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "bi_tool",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0b715af88ed6bff62",
            "arn": "arn:aws:ec2:us-east-1:761018894071:instance/i-0ed21c88700dce3c1",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 1
              }
            ],
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0ed21c88700dce3c1",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "tf_test",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 2,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-0a31f92197bf778a2",
            "private_dns": "ip-10-0-1-215.ec2.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.215",
            "public_dns": "ec2-3-216-79-94.compute-1.amazonaws.com",
            "public_ip": "3.216.79.94",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 3000,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 125,
                "volume_id": "vol-0db200393c16ab3c9",
                "volume_size": 2,
                "volume_type": "gp3"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-0ab815f44992f5081",
            "tags": {
              "Name": "kamran-bi-tool"
            },
            "tags_all": {
              "Name": "kamran-bi-tool"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "f83f1e1605391551c1371756bf4ab15c1d7ea0a8",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-0172d12c51650595c"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "user_data"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:internet-gateway/igw-08819845b99458055",
            "id": "igw-08819845b99458055",
            "owner_id": "761018894071",
            "tags": {
              "Name": "kamran-igw"
            },
            "tags_all": {
              "Name": "kamran-igw"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_launch_template",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:launch-template/lt-053d03c19988fd023",
            "block_device_mappings": [],
            "capacity_reservation_specification": [],
            "cpu_options": [],
            "credit_specification": [],
            "default_version": 1,
            "description": "",
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_optimized": "",
            "elastic_gpu_specifications": [],
            "elastic_inference_accelerator": [],
            "enclave_options": [],
            "hibernation_options": [],
            "iam_instance_profile": [],
            "id": "lt-053d03c19988fd023",
            "image_id": "ami-0b715af88ed6bff62",
            "instance_initiated_shutdown_behavior": "",
            "instance_market_options": [],
            "instance_requirements": [],
            "instance_type": "t2.micro",
            "kernel_id": "",
            "key_name": "tf_test",
            "latest_version": 1,
            "license_specification": [],
            "maintenance_options": [],
            "metadata_options": [],
            "monitoring": [],
            "name": "kamran-app-20250606012554320400000004",
            "name_prefix": "kamran-app-",
            "network_interfaces": [],
            "placement": [],
            "private_dns_name_options": [],
            "ram_disk_id": "",
            "security_group_names": [],
            "tag_specifications": [
              {
                "resource_type": "instance",
                "tags": {
                  "Name": "kamran-app-instance"
                }
              }
            ],
            "tags": {},
            "tags_all": {},
            "update_default_version": null,
            "user_data": "IyEvYmluL2Jhc2gNCg0KIyBVcGRhdGUgc3lzdGVtIGFuZCBpbnN0YWxsIHJlcXVpcmVkIHBhY2thZ2VzIChBTDIwMjMgdXNlcyBkbmYpDQpzdWRvIGRuZiB1cGRhdGUgLXkNCnN1ZG8gZG5mIGluc3RhbGwgLXkgbmdpbnggZG9ja2VyIGdpdA0KDQojIEluc3RhbGwgRG9ja2VyIENvbXBvc2UNCnN1ZG8gY3VybCAtTCAiaHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2VzL2Rvd25sb2FkL3YyLjIxLjAvZG9ja2VyLWNvbXBvc2UtJCh1bmFtZSAtcyktJCh1bmFtZSAtbSkiIC1vIC91c3IvbG9jYWwvYmluL2RvY2tlci1jb21wb3NlDQpzdWRvIGNobW9kICt4IC91c3IvbG9jYWwvYmluL2RvY2tlci1jb21wb3NlDQoNCiMgSW5zdGFsbCBOb2RlLmpzIDIwDQpjdXJsIC1mc1NMIGh0dHBzOi8vcnBtLm5vZGVzb3VyY2UuY29tL3NldHVwXzIwLnggfCBzdWRvIGJhc2ggLQ0Kc3VkbyBkbmYgaW5zdGFsbCAteSBub2RlanMNCg0KIyBFbmFibGUgYW5kIHN0YXJ0IHNlcnZpY2VzDQpzdWRvIHN5c3RlbWN0bCBlbmFibGUgbmdpbnggZG9ja2VyDQpzdWRvIHN5c3RlbWN0bCBzdGFydCBuZ2lueCBkb2NrZXINCg0KIyBBZGQgZWMyLXVzZXIgdG8gZG9ja2VyIGdyb3VwDQpzdWRvIHVzZXJtb2QgLWFHIGRvY2tlciBlYzItdXNlcg0KDQojIFdhaXQgZm9yIHNlcnZpY2VzIHRvIHN0YXJ0DQpzbGVlcCAxMA0KDQojIENsb25lIHRoZSByZXBvc2l0b3J5DQpjZCAvaG9tZS9lYzItdXNlcg0Kc3VkbyBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2thbWl5Mmova2FtcmFuLWF3cy1wcm9qZWN0LmdpdCBhcHAgfHwgew0KICAgIGVjaG8gIkdpdCBjbG9uZSBmYWlsZWQsIGNyZWF0aW5nIHBsYWNlaG9sZGVyIGFwcCINCiAgICBzdWRvIG1rZGlyIC1wIGFwcC9kb2NrZXINCiAgICBzdWRvIGNob3duIC1SIGVjMi11c2VyOmVjMi11c2VyIGFwcA0KICAgIGV4aXQgMA0KfQ0Kc3VkbyBjaG93biAtUiBlYzItdXNlcjplYzItdXNlciBhcHANCg0KIyBOYXZpZ2F0ZSB0byBkb2NrZXIgZGlyZWN0b3J5DQpjZCAvaG9tZS9lYzItdXNlci9hcHAvZG9ja2VyDQoNCiMgQ3JlYXRlIGVudmlyb25tZW50IGZpbGUgZm9yIERvY2tlciBDb21wb3NlDQpjYXQgPDxFT0YgPiAuZW52DQpQR19IT1NUPWthbXJhbi1wb3N0Z3Jlc3FsLmNpejI0ZTh1MmZxcy51cy1lYXN0LTEucmRzLmFtYXpvbmF3cy5jb206NTQzMg0KUEdfUE9SVD01NDMyDQpQR19EQVRBQkFTRT1rYW1yYW5wZ2RiDQpQR19VU0VSPWthbXJhbnVzZXINClBHX1BBU1NXT1JEPVBhc3N3b3JkMTIzIQ0KTVlTUUxfSE9TVD1rYW1yYW4tbXlzcWwuY2l6MjRlOHUyZnFzLnVzLWVhc3QtMS5yZHMuYW1hem9uYXdzLmNvbTozMzA2DQpNWVNRTF9QT1JUPTMzMDYNCk1ZU1FMX0RBVEFCQVNFPWthbXJhbm15c3FsZGINCk1ZU1FMX1VTRVI9a2FtcmFudXNlcg0KTVlTUUxfUEFTU1dPUkQ9UGFzc3dvcmQxMjMhDQpSRUFDVF9BUFBfQVBJX1VSTD0vYXBpDQpFT0YNCg0KIyBXYWl0IGZvciBEb2NrZXIgdG8gYmUgcmVhZHkNCnNsZWVwIDMwDQoNCiMgQnVpbGQgYW5kIHJ1biB0aGUgYXBwbGljYXRpb24NCnN1ZG8gLXUgZWMyLXVzZXIgZG9ja2VyLWNvbXBvc2UgdXAgLWQNCg0KIyBXYWl0IGZvciBjb250YWluZXJzIHRvIHN0YXJ0DQpzbGVlcCA2MA0KDQojIENvbmZpZ3VyZSBOZ2lueCBhcyByZXZlcnNlIHByb3h5DQpjYXQgPDxFT0YgfCBzdWRvIHRlZSAvZXRjL25naW54L2NvbmYuZC9hcHAuY29uZg0Kc2VydmVyIHsNCiAgICBsaXN0ZW4gODAgZGVmYXVsdF9zZXJ2ZXI7DQogICAgc2VydmVyX25hbWUgXzsNCg0KICAgIGxvY2F0aW9uIC8gew0KICAgICAgICBwcm94eV9wYXNzIGh0dHA6Ly8xMjcuMC4wLjE6MzAwMDsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBIb3N0IFwkaG9zdDsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLVJlYWwtSVAgXCRyZW1vdGVfYWRkcjsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLUZvcndhcmRlZC1Gb3IgXCRwcm94eV9hZGRfeF9mb3J3YXJkZWRfZm9yOw0KICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFgtRm9yd2FyZGVkLVByb3RvIFwkc2NoZW1lOw0KICAgIH0NCg0KICAgIGxvY2F0aW9uIC9hcGkvIHsNCiAgICAgICAgcHJveHlfcGFzcyBodHRwOi8vMTI3LjAuMC4xOjUwMDAvYXBpLzsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBIb3N0IFwkaG9zdDsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLVJlYWwtSVAgXCRyZW1vdGVfYWRkcjsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLUZvcndhcmRlZC1Gb3IgXCRwcm94eV9hZGRfeF9mb3J3YXJkZWRfZm9yOw0KICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFgtRm9yd2FyZGVkLVByb3RvIFwkc2NoZW1lOw0KICAgIH0NCg0KICAgIGxvY2F0aW9uIC9oZWFsdGggew0KICAgICAgICBwcm94eV9wYXNzIGh0dHA6Ly8xMjcuMC4wLjE6NTAwMC9oZWFsdGg7DQogICAgICAgIHByb3h5X3NldF9oZWFkZXIgSG9zdCBcJGhvc3Q7DQogICAgICAgIHByb3h5X3NldF9oZWFkZXIgWC1SZWFsLUlQIFwkcmVtb3RlX2FkZHI7DQogICAgfQ0KfQ0KRU9GDQoNCiMgUmVtb3ZlIGRlZmF1bHQgbmdpbnggY29uZmlnDQpzdWRvIHJtIC1mIC9ldGMvbmdpbngvY29uZi5kL2RlZmF1bHQuY29uZg0KDQojIFJlc3RhcnQgTmdpbngNCnN1ZG8gc3lzdGVtY3RsIHJlc3RhcnQgbmdpbngNCg0KIyBMb2cgc3RhdHVzIGZvciBkZWJ1Z2dpbmcNCmVjaG8gIj09PSBEb2NrZXIgU3RhdHVzID09PSIgPj4gL3Zhci9sb2cvdXNlci1kYXRhLmxvZw0Kc3VkbyBkb2NrZXIgcHMgPj4gL3Zhci9sb2cvdXNlci1kYXRhLmxvZw0KZWNobyAiPT09IERvY2tlciBMb2dzID09PSIgPj4gL3Zhci9sb2cvdXNlci1kYXRhLmxvZw0Kc3VkbyBkb2NrZXItY29tcG9zZSBsb2dzID4+IC92YXIvbG9nL3VzZXItZGF0YS5sb2c=",
            "vpc_security_group_ids": [
              "sg-0172d12c51650595c"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "user_data"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_db_instance.mysql",
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_mysql",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_logs": [
              {
                "bucket": "",
                "enabled": false,
                "prefix": ""
              }
            ],
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "arn_suffix": "app/kamran-alb/4852c06a7537e6d1",
            "client_keep_alive": 3600,
            "connection_logs": [
              {
                "bucket": "",
                "enabled": false,
                "prefix": ""
              }
            ],
            "customer_owned_ipv4_pool": "",
            "desync_mitigation_mode": "defensive",
            "dns_name": "kamran-alb-2032215410.us-east-1.elb.amazonaws.com",
            "dns_record_client_routing_policy": null,
            "drop_invalid_header_fields": false,
            "enable_cross_zone_load_balancing": true,
            "enable_deletion_protection": false,
            "enable_http2": true,
            "enable_tls_version_and_cipher_suite_headers": false,
            "enable_waf_fail_open": false,
            "enable_xff_client_port": false,
            "enable_zonal_shift": false,
            "enforce_security_group_inbound_rules_on_private_link_traffic": "",
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "idle_timeout": 60,
            "internal": false,
            "ip_address_type": "ipv4",
            "ipam_pools": [],
            "load_balancer_type": "application",
            "minimum_load_balancer_capacity": [],
            "name": "kamran-alb",
            "name_prefix": "",
            "preserve_host_header": false,
            "security_groups": [
              "sg-00b60ae4ea9e6d8a1"
            ],
            "subnet_mapping": [
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-03cf176be4a0d4ab9"
              },
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-0ab815f44992f5081"
              }
            ],
            "subnets": [
              "subnet-03cf176be4a0d4ab9",
              "subnet-0ab815f44992f5081"
            ],
            "tags": {
              "Name": "kamran-alb"
            },
            "tags_all": {
              "Name": "kamran-alb"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed",
            "xff_header_processing_mode": "append",
            "zone_id": "Z35SXDOTRQ7X7K"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "http",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "alpn_policy": null,
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/00cb2acc71297cb1",
            "certificate_arn": null,
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [
                  {
                    "host": "#{host}",
                    "path": "/#{path}",
                    "port": "443",
                    "protocol": "HTTPS",
                    "query": "#{query}",
                    "status_code": "HTTP_301"
                  }
                ],
                "target_group_arn": "",
                "type": "redirect"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/00cb2acc71297cb1",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "mutual_authentication": [],
            "port": 80,
            "protocol": "HTTP",
            "routing_http_request_x_amzn_mtls_clientcert_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_issuer_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_leaf_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_subject_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_validity_header_name": null,
            "routing_http_request_x_amzn_tls_cipher_suite_header_name": null,
            "routing_http_request_x_amzn_tls_version_header_name": null,
            "routing_http_response_access_control_allow_credentials_header_value": "",
            "routing_http_response_access_control_allow_headers_header_value": "",
            "routing_http_response_access_control_allow_methods_header_value": "",
            "routing_http_response_access_control_allow_origin_header_value": "",
            "routing_http_response_access_control_expose_headers_header_value": "",
            "routing_http_response_access_control_max_age_header_value": "",
            "routing_http_response_content_security_policy_header_value": "",
            "routing_http_response_server_enabled": true,
            "routing_http_response_strict_transport_security_header_value": "",
            "routing_http_response_x_content_type_options_header_value": "",
            "routing_http_response_x_frame_options_header_value": "",
            "ssl_policy": "",
            "tags": {},
            "tags_all": {},
            "tcp_idle_timeout_seconds": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsInVwZGF0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_lb.main",
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "https",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "alpn_policy": null,
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/b95784a19bfb87df",
            "certificate_arn": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/b95784a19bfb87df",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "mutual_authentication": [
              {
                "advertise_trust_store_ca_names": "",
                "ignore_client_certificate_expiry": false,
                "mode": "off",
                "trust_store_arn": ""
              }
            ],
            "port": 443,
            "protocol": "HTTPS",
            "routing_http_request_x_amzn_mtls_clientcert_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_issuer_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_leaf_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_subject_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_validity_header_name": "",
            "routing_http_request_x_amzn_tls_cipher_suite_header_name": "",
            "routing_http_request_x_amzn_tls_version_header_name": "",
            "routing_http_response_access_control_allow_credentials_header_value": "",
            "routing_http_response_access_control_allow_headers_header_value": "",
            "routing_http_response_access_control_allow_methods_header_value": "",
            "routing_http_response_access_control_allow_origin_header_value": "",
            "routing_http_response_access_control_expose_headers_header_value": "",
            "routing_http_response_access_control_max_age_header_value": "",
            "routing_http_response_content_security_policy_header_value": "",
            "routing_http_response_server_enabled": true,
            "routing_http_response_strict_transport_security_header_value": "",
            "routing_http_response_x_content_type_options_header_value": "",
            "routing_http_response_x_frame_options_header_value": "",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "tags": {},
            "tags_all": {},
            "tcp_idle_timeout_seconds": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsInVwZGF0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_acm_certificate.main",
            "aws_acm_certificate_validation.main",
            "aws_lb.main",
            "aws_lb_target_group.app",
            "aws_route53_record.cert_validation",
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
            "arn_suffix": "targetgroup/kamran-app-tg/eb31447c24e10c8c",
            "connection_termination": null,
            "deregistration_delay": "300",
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 2,
                "interval": 30,
                "matcher": "200",
                "path": "/",
                "port": "traffic-port",
                "protocol": "HTTP",
                "timeout": 15,
                "unhealthy_threshold": 5
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
            "ip_address_type": "ipv4",
            "lambda_multi_value_headers_enabled": false,
            "load_balancer_arns": [
              "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1"
            ],
            "load_balancing_algorithm_type": "round_robin",
            "load_balancing_anomaly_mitigation": "off",
            "load_balancing_cross_zone_enabled": "use_load_balancer_configuration",
            "name": "kamran-app-tg",
            "name_prefix": "",
            "port": 80,
            "preserve_client_ip": null,
            "protocol": "HTTP",
            "protocol_version": "HTTP1",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "cookie_name": "",
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Name": "kamran-app-tg"
            },
            "tags_all": {
              "Name": "kamran-app-tg"
            },
            "target_failover": [
              {
                "on_deregistration": null,
                "on_unhealthy": null
              }
            ],
            "target_group_health": [
              {
                "dns_failover": [
                  {
                    "minimum_healthy_targets_count": "1",
                    "minimum_healthy_targets_percentage": "off"
                  }
                ],
                "unhealthy_state_routing": [
                  {
                    "minimum_healthy_targets_count": 1,
                    "minimum_healthy_targets_percentage": "off"
                  }
                ]
              }
            ],
            "target_health_state": [
              {
                "enable_unhealthy_connection_termination": null,
                "unhealthy_draining_interval": null
              }
            ],
            "target_type": "instance",
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_record",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "alias": [
              {
                "evaluate_target_health": true,
                "name": "kamran-alb-2032215410.us-east-1.elb.amazonaws.com",
                "zone_id": "Z35SXDOTRQ7X7K"
              }
            ],
            "allow_overwrite": null,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "app.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC_app.kamranshahid.com_A",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "app.kamranshahid.com",
            "records": [],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 0,
            "type": "A",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_lb.main",
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_record",
      "name": "bi",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "alias": [],
            "allow_overwrite": null,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "bi.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC_bi.kamranshahid.com_A",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "bi.kamranshahid.com",
            "records": [
              "3.216.79.94"
            ],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 300,
            "type": "A",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_instance.bi_tool",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_record",
      "name": "cert_validation",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "*.kamranshahid.com",
          "schema_version": 2,
          "attributes": {
            "alias": [],
            "allow_overwrite": true,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC__ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com._CNAME",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "records": [
              "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
            ],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 60,
            "type": "CNAME",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_acm_certificate.main",
            "data.aws_route53_zone.main"
          ]
        },
        {
          "index_key": "kamranshahid.com",
          "schema_version": 2,
          "attributes": {
            "alias": [],
            "allow_overwrite": true,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC__ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com._CNAME",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "records": [
              "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
            ],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 60,
            "type": "CNAME",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_acm_certificate.main",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:route-table/rtb-00f759b681eca74c5",
            "id": "rtb-00f759b681eca74c5",
            "owner_id": "761018894071",
            "propagating_vgws": [],
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "core_network_arn": "",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-08819845b99458055",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Name": "kamran-public-rt"
            },
            "tags_all": {
              "Name": "kamran-public-rt"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.main",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-070bc9b5c543b87a3",
            "route_table_id": "rtb-00f759b681eca74c5",
            "subnet_id": "subnet-0ab815f44992f5081",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.main",
            "aws_route_table.public",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-0740afb46cc87d38a",
            "route_table_id": "rtb-00f759b681eca74c5",
            "subnet_id": "subnet-03cf176be4a0d4ab9",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.main",
            "aws_route_table.public",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "alb",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-00b60ae4ea9e6d8a1",
            "description": "Security group for Application Load Balancer",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-00b60ae4ea9e6d8a1",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "kamran-alb-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-alb-sg"
            },
            "tags_all": {
              "Name": "kamran-alb-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-0172d12c51650595c",
            "description": "Security group for EC2 instances",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0172d12c51650595c",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 5000,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5000
              },
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 3000,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-00b60ae4ea9e6d8a1"
                ],
                "self": false,
                "to_port": 3000
              },
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 5000,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-00b60ae4ea9e6d8a1"
                ],
                "self": false,
                "to_port": 5000
              },
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-00b60ae4ea9e6d8a1"
                ],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "kamran-ec2-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-ec2-sg"
            },
            "tags_all": {
              "Name": "kamran-ec2-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_security_group.alb",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "rds_mysql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-098a54c61de626934",
            "description": "Security group for RDS MySQL",
            "egress": [],
            "id": "sg-098a54c61de626934",
            "ingress": [
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 3306,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-0172d12c51650595c"
                ],
                "self": false,
                "to_port": 3306
              }
            ],
            "name": "kamran-rds-mysql-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-rds-mysql-sg"
            },
            "tags_all": {
              "Name": "kamran-rds-mysql-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "rds_postgresql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-013170aff4546e079",
            "description": "Security group for RDS PostgreSQL",
            "egress": [],
            "id": "sg-013170aff4546e079",
            "ingress": [
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 5432,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-0172d12c51650595c"
                ],
                "self": false,
                "to_port": 5432
              }
            ],
            "name": "kamran-rds-postgresql-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-rds-postgresql-sg"
            },
            "tags_all": {
              "Name": "kamran-rds-postgresql-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-0aa6bf003153fb982",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.0.10.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0aa6bf003153fb982",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-private-subnet-1"
            },
            "tags_all": {
              "Name": "kamran-private-subnet-1"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-09a5a96b6c798cabb",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.0.11.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-09a5a96b6c798cabb",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-private-subnet-2"
            },
            "tags_all": {
              "Name": "kamran-private-subnet-2"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-0ab815f44992f5081",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.0.1.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0ab815f44992f5081",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-public-subnet-1"
            },
            "tags_all": {
              "Name": "kamran-public-subnet-1"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-03cf176be4a0d4ab9",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.0.2.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-03cf176be4a0d4ab9",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-public-subnet-2"
            },
            "tags_all": {
              "Name": "kamran-public-subnet-2"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:vpc/vpc-012eea40a10a4e6ed",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-0b6cc7258aa63b981",
            "default_route_table_id": "rtb-01f5afddf7f13445f",
            "default_security_group_id": "sg-02c31187f704b352b",
            "dhcp_options_id": "dopt-0ab2ddc49143db568",
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "enable_network_address_usage_metrics": false,
            "id": "vpc-012eea40a10a4e6ed",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-01f5afddf7f13445f",
            "owner_id": "761018894071",
            "tags": {
              "Name": "kamran-vpc"
            },
            "tags_all": {
              "Name": "kamran-vpc"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}


C:\Users\Kamran\kamran-aws-project\terraform.tfstate.backup
---------------------------------------------
{
  "version": 4,
  "terraform_version": "1.11.4",
  "serial": 117,
  "lineage": "c73ba255-1d62-de64-27ff-f8c935b5f38e",
  "outputs": {
    "alb_dns_name": {
      "value": "kamran-alb-2032215410.us-east-1.elb.amazonaws.com",
      "type": "string"
    },
    "app_url": {
      "value": "https://app.kamranshahid.com",
      "type": "string"
    },
    "bi_tool_public_ip": {
      "value": "3.216.79.94",
      "type": "string"
    },
    "bi_tool_url": {
      "value": "http://bi.kamranshahid.com:5000",
      "type": "string"
    },
    "mysql_endpoint": {
      "value": "kamran-mysql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:3306",
      "type": "string",
      "sensitive": true
    },
    "postgresql_endpoint": {
      "value": "kamran-postgresql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:5432",
      "type": "string",
      "sensitive": true
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "amazon_linux",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0b715af88ed6bff62",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "3000",
                  "snapshot_id": "snap-073ba3c25841a1789",
                  "throughput": "125",
                  "volume_initialization_rate": "0",
                  "volume_size": "2",
                  "volume_type": "gp3"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "boot_mode": "uefi-preferred",
            "creation_date": "2025-05-30T18:46:05.000Z",
            "deprecation_time": "2025-08-28T18:46:00.000Z",
            "description": "Amazon Linux 2023 AMI 2023.7.20250527.1 x86_64 Minimal HVM kernel-6.1",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "al2023-ami-*-x86_64"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0b715af88ed6bff62",
            "image_id": "ami-0b715af88ed6bff62",
            "image_location": "amazon/al2023-ami-minimal-2023.7.20250527.1-kernel-6.1-x86_64",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "v2.0",
            "include_deprecated": false,
            "kernel_id": "",
            "last_launched_time": "",
            "most_recent": true,
            "name": "al2023-ami-minimal-2023.7.20250527.1-kernel-6.1-x86_64",
            "name_regex": null,
            "owner_id": "137112412989",
            "owners": [
              "amazon"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-073ba3c25841a1789",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "uefi_data": null,
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_availability_zones",
      "name": "available",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "all_availability_zones": null,
            "exclude_names": null,
            "exclude_zone_ids": null,
            "filter": null,
            "group_names": [
              "us-east-1-zg-1"
            ],
            "id": "us-east-1",
            "names": [
              "us-east-1a",
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-east-1f"
            ],
            "state": "available",
            "timeouts": null,
            "zone_ids": [
              "use1-az1",
              "use1-az2",
              "use1-az4",
              "use1-az6",
              "use1-az3",
              "use1-az5"
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_route53_zone",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:route53:::hostedzone/Z04719493S7AFET22CBPC",
            "caller_reference": "9ec46f9f-1179-41b5-a9ac-6f478ca747ef",
            "comment": "",
            "id": "Z04719493S7AFET22CBPC",
            "linked_service_description": null,
            "linked_service_principal": null,
            "name": "kamranshahid.com",
            "name_servers": [
              "ns-609.awsdns-12.net",
              "ns-232.awsdns-29.com",
              "ns-1928.awsdns-49.co.uk",
              "ns-1132.awsdns-13.org"
            ],
            "primary_name_server": "ns-609.awsdns-12.net",
            "private_zone": false,
            "resource_record_set_count": 5,
            "tags": {},
            "vpc_id": null,
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_acm_certificate",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "certificate_authority_arn": "",
            "certificate_body": null,
            "certificate_chain": null,
            "domain_name": "kamranshahid.com",
            "domain_validation_options": [
              {
                "domain_name": "*.kamranshahid.com",
                "resource_record_name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com.",
                "resource_record_type": "CNAME",
                "resource_record_value": "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
              },
              {
                "domain_name": "kamranshahid.com",
                "resource_record_name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com.",
                "resource_record_type": "CNAME",
                "resource_record_value": "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
              }
            ],
            "early_renewal_duration": "",
            "id": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "key_algorithm": "RSA_2048",
            "not_after": "2026-07-05T23:59:59Z",
            "not_before": "2025-06-06T00:00:00Z",
            "options": [
              {
                "certificate_transparency_logging_preference": "ENABLED"
              }
            ],
            "pending_renewal": false,
            "private_key": null,
            "renewal_eligibility": "ELIGIBLE",
            "renewal_summary": [],
            "status": "ISSUED",
            "subject_alternative_names": [
              "*.kamranshahid.com",
              "kamranshahid.com"
            ],
            "tags": {
              "Name": "kamran-cert"
            },
            "tags_all": {
              "Name": "kamran-cert"
            },
            "type": "AMAZON_ISSUED",
            "validation_emails": [],
            "validation_method": "DNS",
            "validation_option": []
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key"
              }
            ]
          ],
          "private": "bnVsbA==",
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_acm_certificate_validation",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "certificate_arn": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "id": "2025-06-06 01:19:01.632 +0000 UTC",
            "timeouts": null,
            "validation_record_fqdns": [
              "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo0NTAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_acm_certificate.main",
            "aws_route53_record.cert_validation",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_autoscaling_group",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:autoscaling:us-east-1:761018894071:autoScalingGroup:6dac60ae-aa80-4f6d-9f1a-d374bccfe441:autoScalingGroupName/kamran-app-asg",
            "availability_zone_distribution": [
              {
                "capacity_distribution_strategy": "balanced-best-effort"
              }
            ],
            "availability_zones": [
              "us-east-1a",
              "us-east-1b"
            ],
            "capacity_rebalance": false,
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "default",
                "capacity_reservation_target": []
              }
            ],
            "context": "",
            "default_cooldown": 300,
            "default_instance_warmup": 0,
            "desired_capacity": 2,
            "desired_capacity_type": "",
            "enabled_metrics": [],
            "force_delete": false,
            "force_delete_warm_pool": false,
            "health_check_grace_period": 300,
            "health_check_type": "ELB",
            "id": "kamran-app-asg",
            "ignore_failed_scaling_activities": false,
            "initial_lifecycle_hook": [],
            "instance_maintenance_policy": [],
            "instance_refresh": [],
            "launch_configuration": "",
            "launch_template": [
              {
                "id": "lt-053d03c19988fd023",
                "name": "kamran-app-20250606012554320400000004",
                "version": "$Latest"
              }
            ],
            "load_balancers": [],
            "max_instance_lifetime": 0,
            "max_size": 3,
            "metrics_granularity": "1Minute",
            "min_elb_capacity": null,
            "min_size": 2,
            "mixed_instances_policy": [],
            "name": "kamran-app-asg",
            "name_prefix": "",
            "placement_group": "",
            "predicted_capacity": 0,
            "protect_from_scale_in": false,
            "service_linked_role_arn": "arn:aws:iam::761018894071:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
            "suspended_processes": [],
            "tag": [
              {
                "key": "Name",
                "propagate_at_launch": false,
                "value": "kamran-app-asg"
              }
            ],
            "target_group_arns": [
              "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c"
            ],
            "termination_policies": [],
            "timeouts": null,
            "traffic_source": [
              {
                "identifier": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
                "type": "elbv2"
              }
            ],
            "vpc_zone_identifier": [
              "subnet-03cf176be4a0d4ab9",
              "subnet-0ab815f44992f5081"
            ],
            "wait_for_capacity_timeout": "10m",
            "wait_for_elb_capacity": null,
            "warm_pool": [],
            "warm_pool_size": 0
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjo2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_db_instance.mysql",
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_launch_template.app",
            "aws_lb_target_group.app",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_mysql",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "mysql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "address": "kamran-mysql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com",
            "allocated_storage": 20,
            "allow_major_version_upgrade": null,
            "apply_immediately": false,
            "arn": "arn:aws:rds:us-east-1:761018894071:db:kamran-mysql",
            "auto_minor_version_upgrade": true,
            "availability_zone": "us-east-1a",
            "backup_retention_period": 7,
            "backup_target": "region",
            "backup_window": "03:00-04:00",
            "blue_green_update": [],
            "ca_cert_identifier": "rds-ca-rsa2048-g1",
            "character_set_name": "",
            "copy_tags_to_snapshot": false,
            "custom_iam_instance_profile": "",
            "customer_owned_ip_enabled": false,
            "database_insights_mode": "standard",
            "db_name": "kamranmysqldb",
            "db_subnet_group_name": "kamran-db-subnet-group",
            "dedicated_log_volume": false,
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "",
            "domain_auth_secret_arn": "",
            "domain_dns_ips": [],
            "domain_fqdn": "",
            "domain_iam_role_name": "",
            "domain_ou": "",
            "enabled_cloudwatch_logs_exports": [],
            "endpoint": "kamran-mysql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:3306",
            "engine": "mysql",
            "engine_lifecycle_support": "open-source-rds-extended-support",
            "engine_version": "8.0",
            "engine_version_actual": "8.0.41",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "Z2R2ITUGPM61AM",
            "iam_database_authentication_enabled": false,
            "id": "db-MEKD46BX5FDNS3RETDZCGR62T4",
            "identifier": "kamran-mysql",
            "identifier_prefix": "",
            "instance_class": "db.t3.micro",
            "iops": 0,
            "kms_key_id": "arn:aws:kms:us-east-1:761018894071:key/de731e04-a95e-4243-b347-9b763b838168",
            "latest_restorable_time": "2025-06-06T01:45:00Z",
            "license_model": "general-public-license",
            "listener_endpoint": [],
            "maintenance_window": "sun:04:00-sun:05:00",
            "manage_master_user_password": null,
            "master_user_secret": [],
            "master_user_secret_kms_key_id": null,
            "max_allocated_storage": 100,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "nchar_character_set_name": "",
            "network_type": "IPV4",
            "option_group_name": "default:mysql-8-0",
            "parameter_group_name": "default.mysql8.0",
            "password": "Password123!",
            "password_wo": null,
            "password_wo_version": null,
            "performance_insights_enabled": false,
            "performance_insights_kms_key_id": "",
            "performance_insights_retention_period": 0,
            "port": 3306,
            "publicly_accessible": false,
            "replica_mode": "",
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-MEKD46BX5FDNS3RETDZCGR62T4",
            "restore_to_point_in_time": [],
            "s3_import": [],
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": true,
            "storage_throughput": 0,
            "storage_type": "gp2",
            "tags": {
              "Name": "kamran-mysql"
            },
            "tags_all": {
              "Name": "kamran-mysql"
            },
            "timeouts": null,
            "timezone": "",
            "upgrade_storage_config": null,
            "username": "kamranuser",
            "vpc_security_group_ids": [
              "sg-098a54c61de626934"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password_wo"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NDgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_mysql",
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "postgresql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "address": "kamran-postgresql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com",
            "allocated_storage": 20,
            "allow_major_version_upgrade": null,
            "apply_immediately": false,
            "arn": "arn:aws:rds:us-east-1:761018894071:db:kamran-postgresql",
            "auto_minor_version_upgrade": true,
            "availability_zone": "us-east-1a",
            "backup_retention_period": 7,
            "backup_target": "region",
            "backup_window": "03:00-04:00",
            "blue_green_update": [],
            "ca_cert_identifier": "rds-ca-rsa2048-g1",
            "character_set_name": "",
            "copy_tags_to_snapshot": false,
            "custom_iam_instance_profile": "",
            "customer_owned_ip_enabled": false,
            "database_insights_mode": "standard",
            "db_name": "kamranpgdb",
            "db_subnet_group_name": "kamran-db-subnet-group",
            "dedicated_log_volume": false,
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "",
            "domain_auth_secret_arn": "",
            "domain_dns_ips": [],
            "domain_fqdn": "",
            "domain_iam_role_name": "",
            "domain_ou": "",
            "enabled_cloudwatch_logs_exports": [],
            "endpoint": "kamran-postgresql.ciz24e8u2fqs.us-east-1.rds.amazonaws.com:5432",
            "engine": "postgres",
            "engine_lifecycle_support": "open-source-rds-extended-support",
            "engine_version": "14",
            "engine_version_actual": "14.17",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "Z2R2ITUGPM61AM",
            "iam_database_authentication_enabled": false,
            "id": "db-UHJB7TN6XKFMHBCPJMNXDZDVPE",
            "identifier": "kamran-postgresql",
            "identifier_prefix": "",
            "instance_class": "db.t3.micro",
            "iops": 0,
            "kms_key_id": "arn:aws:kms:us-east-1:761018894071:key/de731e04-a95e-4243-b347-9b763b838168",
            "latest_restorable_time": "2025-06-06T01:42:12Z",
            "license_model": "postgresql-license",
            "listener_endpoint": [],
            "maintenance_window": "sun:04:00-sun:05:00",
            "manage_master_user_password": null,
            "master_user_secret": [],
            "master_user_secret_kms_key_id": null,
            "max_allocated_storage": 100,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "nchar_character_set_name": "",
            "network_type": "IPV4",
            "option_group_name": "default:postgres-14",
            "parameter_group_name": "default.postgres14",
            "password": "Password123!",
            "password_wo": null,
            "password_wo_version": null,
            "performance_insights_enabled": false,
            "performance_insights_kms_key_id": "",
            "performance_insights_retention_period": 0,
            "port": 5432,
            "publicly_accessible": false,
            "replica_mode": "",
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-UHJB7TN6XKFMHBCPJMNXDZDVPE",
            "restore_to_point_in_time": [],
            "s3_import": [],
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": true,
            "storage_throughput": 0,
            "storage_type": "gp2",
            "tags": {
              "Name": "kamran-postgresql"
            },
            "tags_all": {
              "Name": "kamran-postgresql"
            },
            "timeouts": null,
            "timezone": "",
            "upgrade_storage_config": null,
            "username": "kamranuser",
            "vpc_security_group_ids": [
              "sg-013170aff4546e079"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password_wo"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NDgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_subnet_group",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:rds:us-east-1:761018894071:subgrp:kamran-db-subnet-group",
            "description": "Managed by Terraform",
            "id": "kamran-db-subnet-group",
            "name": "kamran-db-subnet-group",
            "name_prefix": "",
            "subnet_ids": [
              "subnet-09a5a96b6c798cabb",
              "subnet-0aa6bf003153fb982"
            ],
            "supported_network_types": [
              "IPV4"
            ],
            "tags": {
              "Name": "kamran-db-subnet-group"
            },
            "tags_all": {
              "Name": "kamran-db-subnet-group"
            },
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "bi_tool",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0b715af88ed6bff62",
            "arn": "arn:aws:ec2:us-east-1:761018894071:instance/i-0ed21c88700dce3c1",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 1
              }
            ],
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0ed21c88700dce3c1",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "tf_test",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 2,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-0a31f92197bf778a2",
            "private_dns": "ip-10-0-1-215.ec2.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.215",
            "public_dns": "ec2-3-216-79-94.compute-1.amazonaws.com",
            "public_ip": "3.216.79.94",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 3000,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 125,
                "volume_id": "vol-0db200393c16ab3c9",
                "volume_size": 2,
                "volume_type": "gp3"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-0ab815f44992f5081",
            "tags": {
              "Name": "kamran-bi-tool"
            },
            "tags_all": {
              "Name": "kamran-bi-tool"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "f83f1e1605391551c1371756bf4ab15c1d7ea0a8",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-0172d12c51650595c"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "user_data"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:internet-gateway/igw-08819845b99458055",
            "id": "igw-08819845b99458055",
            "owner_id": "761018894071",
            "tags": {
              "Name": "kamran-igw"
            },
            "tags_all": {
              "Name": "kamran-igw"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_launch_template",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:launch-template/lt-053d03c19988fd023",
            "block_device_mappings": [],
            "capacity_reservation_specification": [],
            "cpu_options": [],
            "credit_specification": [],
            "default_version": 1,
            "description": "",
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_optimized": "",
            "elastic_gpu_specifications": [],
            "elastic_inference_accelerator": [],
            "enclave_options": [],
            "hibernation_options": [],
            "iam_instance_profile": [],
            "id": "lt-053d03c19988fd023",
            "image_id": "ami-0b715af88ed6bff62",
            "instance_initiated_shutdown_behavior": "",
            "instance_market_options": [],
            "instance_requirements": [],
            "instance_type": "t2.micro",
            "kernel_id": "",
            "key_name": "tf_test",
            "latest_version": 1,
            "license_specification": [],
            "maintenance_options": [],
            "metadata_options": [],
            "monitoring": [],
            "name": "kamran-app-20250606012554320400000004",
            "name_prefix": "kamran-app-",
            "network_interfaces": [],
            "placement": [],
            "private_dns_name_options": [],
            "ram_disk_id": "",
            "security_group_names": [],
            "tag_specifications": [
              {
                "resource_type": "instance",
                "tags": {
                  "Name": "kamran-app-instance"
                }
              }
            ],
            "tags": {},
            "tags_all": {},
            "update_default_version": null,
            "user_data": "IyEvYmluL2Jhc2gNCg0KIyBVcGRhdGUgc3lzdGVtIGFuZCBpbnN0YWxsIHJlcXVpcmVkIHBhY2thZ2VzIChBTDIwMjMgdXNlcyBkbmYpDQpzdWRvIGRuZiB1cGRhdGUgLXkNCnN1ZG8gZG5mIGluc3RhbGwgLXkgbmdpbnggZG9ja2VyIGdpdA0KDQojIEluc3RhbGwgRG9ja2VyIENvbXBvc2UNCnN1ZG8gY3VybCAtTCAiaHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2VzL2Rvd25sb2FkL3YyLjIxLjAvZG9ja2VyLWNvbXBvc2UtJCh1bmFtZSAtcyktJCh1bmFtZSAtbSkiIC1vIC91c3IvbG9jYWwvYmluL2RvY2tlci1jb21wb3NlDQpzdWRvIGNobW9kICt4IC91c3IvbG9jYWwvYmluL2RvY2tlci1jb21wb3NlDQoNCiMgSW5zdGFsbCBOb2RlLmpzIDIwDQpjdXJsIC1mc1NMIGh0dHBzOi8vcnBtLm5vZGVzb3VyY2UuY29tL3NldHVwXzIwLnggfCBzdWRvIGJhc2ggLQ0Kc3VkbyBkbmYgaW5zdGFsbCAteSBub2RlanMNCg0KIyBFbmFibGUgYW5kIHN0YXJ0IHNlcnZpY2VzDQpzdWRvIHN5c3RlbWN0bCBlbmFibGUgbmdpbnggZG9ja2VyDQpzdWRvIHN5c3RlbWN0bCBzdGFydCBuZ2lueCBkb2NrZXINCg0KIyBBZGQgZWMyLXVzZXIgdG8gZG9ja2VyIGdyb3VwDQpzdWRvIHVzZXJtb2QgLWFHIGRvY2tlciBlYzItdXNlcg0KDQojIFdhaXQgZm9yIHNlcnZpY2VzIHRvIHN0YXJ0DQpzbGVlcCAxMA0KDQojIENsb25lIHRoZSByZXBvc2l0b3J5DQpjZCAvaG9tZS9lYzItdXNlcg0Kc3VkbyBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2thbWl5Mmova2FtcmFuLWF3cy1wcm9qZWN0LmdpdCBhcHAgfHwgew0KICAgIGVjaG8gIkdpdCBjbG9uZSBmYWlsZWQsIGNyZWF0aW5nIHBsYWNlaG9sZGVyIGFwcCINCiAgICBzdWRvIG1rZGlyIC1wIGFwcC9kb2NrZXINCiAgICBzdWRvIGNob3duIC1SIGVjMi11c2VyOmVjMi11c2VyIGFwcA0KICAgIGV4aXQgMA0KfQ0Kc3VkbyBjaG93biAtUiBlYzItdXNlcjplYzItdXNlciBhcHANCg0KIyBOYXZpZ2F0ZSB0byBkb2NrZXIgZGlyZWN0b3J5DQpjZCAvaG9tZS9lYzItdXNlci9hcHAvZG9ja2VyDQoNCiMgQ3JlYXRlIGVudmlyb25tZW50IGZpbGUgZm9yIERvY2tlciBDb21wb3NlDQpjYXQgPDxFT0YgPiAuZW52DQpQR19IT1NUPWthbXJhbi1wb3N0Z3Jlc3FsLmNpejI0ZTh1MmZxcy51cy1lYXN0LTEucmRzLmFtYXpvbmF3cy5jb206NTQzMg0KUEdfUE9SVD01NDMyDQpQR19EQVRBQkFTRT1rYW1yYW5wZ2RiDQpQR19VU0VSPWthbXJhbnVzZXINClBHX1BBU1NXT1JEPVBhc3N3b3JkMTIzIQ0KTVlTUUxfSE9TVD1rYW1yYW4tbXlzcWwuY2l6MjRlOHUyZnFzLnVzLWVhc3QtMS5yZHMuYW1hem9uYXdzLmNvbTozMzA2DQpNWVNRTF9QT1JUPTMzMDYNCk1ZU1FMX0RBVEFCQVNFPWthbXJhbm15c3FsZGINCk1ZU1FMX1VTRVI9a2FtcmFudXNlcg0KTVlTUUxfUEFTU1dPUkQ9UGFzc3dvcmQxMjMhDQpSRUFDVF9BUFBfQVBJX1VSTD0vYXBpDQpFT0YNCg0KIyBXYWl0IGZvciBEb2NrZXIgdG8gYmUgcmVhZHkNCnNsZWVwIDMwDQoNCiMgQnVpbGQgYW5kIHJ1biB0aGUgYXBwbGljYXRpb24NCnN1ZG8gLXUgZWMyLXVzZXIgZG9ja2VyLWNvbXBvc2UgdXAgLWQNCg0KIyBXYWl0IGZvciBjb250YWluZXJzIHRvIHN0YXJ0DQpzbGVlcCA2MA0KDQojIENvbmZpZ3VyZSBOZ2lueCBhcyByZXZlcnNlIHByb3h5DQpjYXQgPDxFT0YgfCBzdWRvIHRlZSAvZXRjL25naW54L2NvbmYuZC9hcHAuY29uZg0Kc2VydmVyIHsNCiAgICBsaXN0ZW4gODAgZGVmYXVsdF9zZXJ2ZXI7DQogICAgc2VydmVyX25hbWUgXzsNCg0KICAgIGxvY2F0aW9uIC8gew0KICAgICAgICBwcm94eV9wYXNzIGh0dHA6Ly8xMjcuMC4wLjE6MzAwMDsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBIb3N0IFwkaG9zdDsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLVJlYWwtSVAgXCRyZW1vdGVfYWRkcjsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLUZvcndhcmRlZC1Gb3IgXCRwcm94eV9hZGRfeF9mb3J3YXJkZWRfZm9yOw0KICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFgtRm9yd2FyZGVkLVByb3RvIFwkc2NoZW1lOw0KICAgIH0NCg0KICAgIGxvY2F0aW9uIC9hcGkvIHsNCiAgICAgICAgcHJveHlfcGFzcyBodHRwOi8vMTI3LjAuMC4xOjUwMDAvYXBpLzsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBIb3N0IFwkaG9zdDsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLVJlYWwtSVAgXCRyZW1vdGVfYWRkcjsNCiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLUZvcndhcmRlZC1Gb3IgXCRwcm94eV9hZGRfeF9mb3J3YXJkZWRfZm9yOw0KICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFgtRm9yd2FyZGVkLVByb3RvIFwkc2NoZW1lOw0KICAgIH0NCg0KICAgIGxvY2F0aW9uIC9oZWFsdGggew0KICAgICAgICBwcm94eV9wYXNzIGh0dHA6Ly8xMjcuMC4wLjE6NTAwMC9oZWFsdGg7DQogICAgICAgIHByb3h5X3NldF9oZWFkZXIgSG9zdCBcJGhvc3Q7DQogICAgICAgIHByb3h5X3NldF9oZWFkZXIgWC1SZWFsLUlQIFwkcmVtb3RlX2FkZHI7DQogICAgfQ0KfQ0KRU9GDQoNCiMgUmVtb3ZlIGRlZmF1bHQgbmdpbnggY29uZmlnDQpzdWRvIHJtIC1mIC9ldGMvbmdpbngvY29uZi5kL2RlZmF1bHQuY29uZg0KDQojIFJlc3RhcnQgTmdpbngNCnN1ZG8gc3lzdGVtY3RsIHJlc3RhcnQgbmdpbngNCg0KIyBMb2cgc3RhdHVzIGZvciBkZWJ1Z2dpbmcNCmVjaG8gIj09PSBEb2NrZXIgU3RhdHVzID09PSIgPj4gL3Zhci9sb2cvdXNlci1kYXRhLmxvZw0Kc3VkbyBkb2NrZXIgcHMgPj4gL3Zhci9sb2cvdXNlci1kYXRhLmxvZw0KZWNobyAiPT09IERvY2tlciBMb2dzID09PSIgPj4gL3Zhci9sb2cvdXNlci1kYXRhLmxvZw0Kc3VkbyBkb2NrZXItY29tcG9zZSBsb2dzID4+IC92YXIvbG9nL3VzZXItZGF0YS5sb2c=",
            "vpc_security_group_ids": [
              "sg-0172d12c51650595c"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "user_data"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_db_instance.mysql",
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_mysql",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_logs": [
              {
                "bucket": "",
                "enabled": false,
                "prefix": ""
              }
            ],
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "arn_suffix": "app/kamran-alb/4852c06a7537e6d1",
            "client_keep_alive": 3600,
            "connection_logs": [
              {
                "bucket": "",
                "enabled": false,
                "prefix": ""
              }
            ],
            "customer_owned_ipv4_pool": "",
            "desync_mitigation_mode": "defensive",
            "dns_name": "kamran-alb-2032215410.us-east-1.elb.amazonaws.com",
            "dns_record_client_routing_policy": null,
            "drop_invalid_header_fields": false,
            "enable_cross_zone_load_balancing": true,
            "enable_deletion_protection": false,
            "enable_http2": true,
            "enable_tls_version_and_cipher_suite_headers": false,
            "enable_waf_fail_open": false,
            "enable_xff_client_port": false,
            "enable_zonal_shift": false,
            "enforce_security_group_inbound_rules_on_private_link_traffic": "",
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "idle_timeout": 60,
            "internal": false,
            "ip_address_type": "ipv4",
            "ipam_pools": [],
            "load_balancer_type": "application",
            "minimum_load_balancer_capacity": [],
            "name": "kamran-alb",
            "name_prefix": "",
            "preserve_host_header": false,
            "security_groups": [
              "sg-00b60ae4ea9e6d8a1"
            ],
            "subnet_mapping": [
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-03cf176be4a0d4ab9"
              },
              {
                "allocation_id": "",
                "ipv6_address": "",
                "outpost_id": "",
                "private_ipv4_address": "",
                "subnet_id": "subnet-0ab815f44992f5081"
              }
            ],
            "subnets": [
              "subnet-03cf176be4a0d4ab9",
              "subnet-0ab815f44992f5081"
            ],
            "tags": {
              "Name": "kamran-alb"
            },
            "tags_all": {
              "Name": "kamran-alb"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed",
            "xff_header_processing_mode": "append",
            "zone_id": "Z35SXDOTRQ7X7K"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "http",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "alpn_policy": null,
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/00cb2acc71297cb1",
            "certificate_arn": null,
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [
                  {
                    "host": "#{host}",
                    "path": "/#{path}",
                    "port": "443",
                    "protocol": "HTTPS",
                    "query": "#{query}",
                    "status_code": "HTTP_301"
                  }
                ],
                "target_group_arn": "",
                "type": "redirect"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/00cb2acc71297cb1",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "mutual_authentication": [],
            "port": 80,
            "protocol": "HTTP",
            "routing_http_request_x_amzn_mtls_clientcert_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_issuer_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_leaf_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_subject_header_name": null,
            "routing_http_request_x_amzn_mtls_clientcert_validity_header_name": null,
            "routing_http_request_x_amzn_tls_cipher_suite_header_name": null,
            "routing_http_request_x_amzn_tls_version_header_name": null,
            "routing_http_response_access_control_allow_credentials_header_value": "",
            "routing_http_response_access_control_allow_headers_header_value": "",
            "routing_http_response_access_control_allow_methods_header_value": "",
            "routing_http_response_access_control_allow_origin_header_value": "",
            "routing_http_response_access_control_expose_headers_header_value": "",
            "routing_http_response_access_control_max_age_header_value": "",
            "routing_http_response_content_security_policy_header_value": "",
            "routing_http_response_server_enabled": true,
            "routing_http_response_strict_transport_security_header_value": "",
            "routing_http_response_x_content_type_options_header_value": "",
            "routing_http_response_x_frame_options_header_value": "",
            "ssl_policy": "",
            "tags": {},
            "tags_all": {},
            "tcp_idle_timeout_seconds": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsInVwZGF0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_lb.main",
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "https",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "alpn_policy": null,
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/b95784a19bfb87df",
            "certificate_arn": "arn:aws:acm:us-east-1:761018894071:certificate/169802c7-585c-44e5-9106-a7d31f157236",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:listener/app/kamran-alb/4852c06a7537e6d1/b95784a19bfb87df",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1",
            "mutual_authentication": [
              {
                "advertise_trust_store_ca_names": "",
                "ignore_client_certificate_expiry": false,
                "mode": "off",
                "trust_store_arn": ""
              }
            ],
            "port": 443,
            "protocol": "HTTPS",
            "routing_http_request_x_amzn_mtls_clientcert_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_issuer_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_leaf_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_subject_header_name": "",
            "routing_http_request_x_amzn_mtls_clientcert_validity_header_name": "",
            "routing_http_request_x_amzn_tls_cipher_suite_header_name": "",
            "routing_http_request_x_amzn_tls_version_header_name": "",
            "routing_http_response_access_control_allow_credentials_header_value": "",
            "routing_http_response_access_control_allow_headers_header_value": "",
            "routing_http_response_access_control_allow_methods_header_value": "",
            "routing_http_response_access_control_allow_origin_header_value": "",
            "routing_http_response_access_control_expose_headers_header_value": "",
            "routing_http_response_access_control_max_age_header_value": "",
            "routing_http_response_content_security_policy_header_value": "",
            "routing_http_response_server_enabled": true,
            "routing_http_response_strict_transport_security_header_value": "",
            "routing_http_response_x_content_type_options_header_value": "",
            "routing_http_response_x_frame_options_header_value": "",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "tags": {},
            "tags_all": {},
            "tcp_idle_timeout_seconds": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsInVwZGF0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_acm_certificate.main",
            "aws_acm_certificate_validation.main",
            "aws_lb.main",
            "aws_lb_target_group.app",
            "aws_route53_record.cert_validation",
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
            "arn_suffix": "targetgroup/kamran-app-tg/eb31447c24e10c8c",
            "connection_termination": null,
            "deregistration_delay": "300",
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 2,
                "interval": 30,
                "matcher": "200",
                "path": "/",
                "port": "traffic-port",
                "protocol": "HTTP",
                "timeout": 15,
                "unhealthy_threshold": 5
              }
            ],
            "id": "arn:aws:elasticloadbalancing:us-east-1:761018894071:targetgroup/kamran-app-tg/eb31447c24e10c8c",
            "ip_address_type": "ipv4",
            "lambda_multi_value_headers_enabled": false,
            "load_balancer_arns": [
              "arn:aws:elasticloadbalancing:us-east-1:761018894071:loadbalancer/app/kamran-alb/4852c06a7537e6d1"
            ],
            "load_balancing_algorithm_type": "round_robin",
            "load_balancing_anomaly_mitigation": "off",
            "load_balancing_cross_zone_enabled": "use_load_balancer_configuration",
            "name": "kamran-app-tg",
            "name_prefix": "",
            "port": 80,
            "preserve_client_ip": null,
            "protocol": "HTTP",
            "protocol_version": "HTTP1",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "cookie_name": "",
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Name": "kamran-app-tg"
            },
            "tags_all": {
              "Name": "kamran-app-tg"
            },
            "target_failover": [
              {
                "on_deregistration": null,
                "on_unhealthy": null
              }
            ],
            "target_group_health": [
              {
                "dns_failover": [
                  {
                    "minimum_healthy_targets_count": "1",
                    "minimum_healthy_targets_percentage": "off"
                  }
                ],
                "unhealthy_state_routing": [
                  {
                    "minimum_healthy_targets_count": 1,
                    "minimum_healthy_targets_percentage": "off"
                  }
                ]
              }
            ],
            "target_health_state": [
              {
                "enable_unhealthy_connection_termination": null,
                "unhealthy_draining_interval": null
              }
            ],
            "target_type": "instance",
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_record",
      "name": "app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "alias": [
              {
                "evaluate_target_health": true,
                "name": "kamran-alb-2032215410.us-east-1.elb.amazonaws.com",
                "zone_id": "Z35SXDOTRQ7X7K"
              }
            ],
            "allow_overwrite": null,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "app.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC_app.kamranshahid.com_A",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "app.kamranshahid.com",
            "records": [],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 0,
            "type": "A",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_lb.main",
            "aws_security_group.alb",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_record",
      "name": "bi",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "alias": [],
            "allow_overwrite": null,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "bi.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC_bi.kamranshahid.com_A",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "bi.kamranshahid.com",
            "records": [
              "3.216.79.94"
            ],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 300,
            "type": "A",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_db_instance.postgresql",
            "aws_db_subnet_group.main",
            "aws_instance.bi_tool",
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_security_group.rds_postgresql",
            "aws_subnet.private",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_ami.amazon_linux",
            "data.aws_availability_zones.available",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_record",
      "name": "cert_validation",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "*.kamranshahid.com",
          "schema_version": 2,
          "attributes": {
            "alias": [],
            "allow_overwrite": true,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC__ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com._CNAME",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "records": [
              "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
            ],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 60,
            "type": "CNAME",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_acm_certificate.main",
            "data.aws_route53_zone.main"
          ]
        },
        {
          "index_key": "kamranshahid.com",
          "schema_version": 2,
          "attributes": {
            "alias": [],
            "allow_overwrite": true,
            "cidr_routing_policy": [],
            "failover_routing_policy": [],
            "fqdn": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "geolocation_routing_policy": [],
            "geoproximity_routing_policy": [],
            "health_check_id": "",
            "id": "Z04719493S7AFET22CBPC__ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com._CNAME",
            "latency_routing_policy": [],
            "multivalue_answer_routing_policy": false,
            "name": "_ac80b53899098f38105a9a4bcb1bad6f.kamranshahid.com",
            "records": [
              "_0c71c0675cd3a93ec9d55964fc5ef1f1.xlfgrmvvlj.acm-validations.aws."
            ],
            "set_identifier": "",
            "timeouts": null,
            "ttl": 60,
            "type": "CNAME",
            "weighted_routing_policy": [],
            "zone_id": "Z04719493S7AFET22CBPC"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_acm_certificate.main",
            "data.aws_route53_zone.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:route-table/rtb-00f759b681eca74c5",
            "id": "rtb-00f759b681eca74c5",
            "owner_id": "761018894071",
            "propagating_vgws": [],
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "core_network_arn": "",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-08819845b99458055",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Name": "kamran-public-rt"
            },
            "tags_all": {
              "Name": "kamran-public-rt"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.main",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-070bc9b5c543b87a3",
            "route_table_id": "rtb-00f759b681eca74c5",
            "subnet_id": "subnet-0ab815f44992f5081",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.main",
            "aws_route_table.public",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-0740afb46cc87d38a",
            "route_table_id": "rtb-00f759b681eca74c5",
            "subnet_id": "subnet-03cf176be4a0d4ab9",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.main",
            "aws_route_table.public",
            "aws_subnet.public",
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "alb",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-00b60ae4ea9e6d8a1",
            "description": "Security group for Application Load Balancer",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-00b60ae4ea9e6d8a1",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "kamran-alb-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-alb-sg"
            },
            "tags_all": {
              "Name": "kamran-alb-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-0172d12c51650595c",
            "description": "Security group for EC2 instances",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0172d12c51650595c",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 5000,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5000
              },
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 3000,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-00b60ae4ea9e6d8a1"
                ],
                "self": false,
                "to_port": 3000
              },
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 5000,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-00b60ae4ea9e6d8a1"
                ],
                "self": false,
                "to_port": 5000
              },
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-00b60ae4ea9e6d8a1"
                ],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "kamran-ec2-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-ec2-sg"
            },
            "tags_all": {
              "Name": "kamran-ec2-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_security_group.alb",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "rds_mysql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-098a54c61de626934",
            "description": "Security group for RDS MySQL",
            "egress": [],
            "id": "sg-098a54c61de626934",
            "ingress": [
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 3306,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-0172d12c51650595c"
                ],
                "self": false,
                "to_port": 3306
              }
            ],
            "name": "kamran-rds-mysql-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-rds-mysql-sg"
            },
            "tags_all": {
              "Name": "kamran-rds-mysql-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "rds_postgresql",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:security-group/sg-013170aff4546e079",
            "description": "Security group for RDS PostgreSQL",
            "egress": [],
            "id": "sg-013170aff4546e079",
            "ingress": [
              {
                "cidr_blocks": [],
                "description": "",
                "from_port": 5432,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [
                  "sg-0172d12c51650595c"
                ],
                "self": false,
                "to_port": 5432
              }
            ],
            "name": "kamran-rds-postgresql-sg",
            "name_prefix": "",
            "owner_id": "761018894071",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "kamran-rds-postgresql-sg"
            },
            "tags_all": {
              "Name": "kamran-rds-postgresql-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_security_group.alb",
            "aws_security_group.ec2",
            "aws_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-0aa6bf003153fb982",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.0.10.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0aa6bf003153fb982",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-private-subnet-1"
            },
            "tags_all": {
              "Name": "kamran-private-subnet-1"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-09a5a96b6c798cabb",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.0.11.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-09a5a96b6c798cabb",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-private-subnet-2"
            },
            "tags_all": {
              "Name": "kamran-private-subnet-2"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-0ab815f44992f5081",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.0.1.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0ab815f44992f5081",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-public-subnet-1"
            },
            "tags_all": {
              "Name": "kamran-public-subnet-1"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:subnet/subnet-03cf176be4a0d4ab9",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.0.2.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-03cf176be4a0d4ab9",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "761018894071",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "kamran-public-subnet-2"
            },
            "tags_all": {
              "Name": "kamran-public-subnet-2"
            },
            "timeouts": null,
            "vpc_id": "vpc-012eea40a10a4e6ed"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.main",
            "data.aws_availability_zones.available"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:761018894071:vpc/vpc-012eea40a10a4e6ed",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-0b6cc7258aa63b981",
            "default_route_table_id": "rtb-01f5afddf7f13445f",
            "default_security_group_id": "sg-02c31187f704b352b",
            "dhcp_options_id": "dopt-0ab2ddc49143db568",
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "enable_network_address_usage_metrics": false,
            "id": "vpc-012eea40a10a4e6ed",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-01f5afddf7f13445f",
            "owner_id": "761018894071",
            "tags": {
              "Name": "kamran-vpc"
            },
            "tags_all": {
              "Name": "kamran-vpc"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}


C:\Users\Kamran\kamran-aws-project\variables.tf
---------------------------------------------
variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "domain_name" {
  description = "Domain name"
  type        = string
  default     = "kamranshahid.com" # Your actual domain
}

variable "key_name" {
  description = "AWS Key Pair name"
  type        = string
  default     = "tf_test"  # Your AWS key pair
}

variable "db_username" {
  description = "Database username"
  type        = string
  default     = "kamranuser"
}

variable "db_password" {
  description = "Database password"
  type        = string
  default     = "Password123!"
  sensitive   = true
}

variable "github_repo" {
  description = "GitHub repository URL"
  type        = string
  default     = "https://github.com/kamiy2j/kamran-aws-project.git"
}

C:\Users\Kamran\kamran-aws-project\vpc.tf
---------------------------------------------
# VPC
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "kamran-vpc"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "kamran-igw"
  }
}

# Public Subnets
resource "aws_subnet" "public" {
  count                   = 2
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.${count.index + 1}.0/24"
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = true

  tags = {
    Name = "kamran-public-subnet-${count.index + 1}"
  }
}

# Private Subnets
resource "aws_subnet" "private" {
  count             = 2
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.${count.index + 10}.0/24"
  availability_zone = data.aws_availability_zones.available.names[count.index]

  tags = {
    Name = "kamran-private-subnet-${count.index + 1}"
  }
}

# Route Table for Public Subnets
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = {
    Name = "kamran-public-rt"
  }
}

# Route Table Associations for Public Subnets
resource "aws_route_table_association" "public" {
  count          = length(aws_subnet.public)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

# DB Subnet Group
resource "aws_db_subnet_group" "main" {
  name       = "kamran-db-subnet-group"
  subnet_ids = aws_subnet.private[*].id

  tags = {
    Name = "kamran-db-subnet-group"
  }
}

C:\Users\Kamran\kamran-aws-project\docker\.env.example
---------------------------------------------
# Database Configuration
PG_HOST=localhost
PG_PORT=5432
PG_DATABASE=kamranpgdb
PG_USER=kamranuser
PG_PASSWORD=Password123!

MYSQL_HOST=localhost
MYSQL_PORT=3306
MYSQL_DATABASE=kamranmysqldb
MYSQL_USER=kamranuser
MYSQL_PASSWORD=Password123!

# Frontend Configuration
REACT_APP_API_URL=/api.
.
C:\Users\Kamran\kamran-aws-project\docker\docker-compose.yml
---------------------------------------------
services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=/api
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - PG_HOST=${PG_HOST:-localhost}
      - PG_PORT=${PG_PORT:-5432}
      - PG_DATABASE=${PG_DATABASE:-devopsdb}
      - PG_USER=${PG_USER:-admin}
      - PG_PASSWORD=${PG_PASSWORD:-Password123!}
      - MYSQL_HOST=${MYSQL_HOST:-localhost}
      - MYSQL_PORT=${MYSQL_PORT:-3306}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-devopsdb}
      - MYSQL_USER=${MYSQL_USER:-admin}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-Password123!}.
.
C:\Users\Kamran\kamran-aws-project\docker\backend\Dockerfile
---------------------------------------------
# Multi-stage build for Node.js backend
FROM node:20-alpine AS builder

WORKDIR /app
COPY package*.json ./

# Use npm install instead of npm ci for development
RUN npm install --only=production

# Production stage
FROM node:20-alpine
WORKDIR /app

# Copy node_modules from builder stage
COPY --from=builder /app/node_modules ./node_modules
COPY . .

EXPOSE 5000

USER node

CMD ["npm", "start"].
.
C:\Users\Kamran\kamran-aws-project\docker\backend\package.json
---------------------------------------------
{
  "name": "kamran-backend",
  "version": "1.0.0",
  "description": "Kamran Backend API",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "pg": "^8.11.0",
    "mysql2": "^3.6.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}.
.
C:\Users\Kamran\kamran-aws-project\docker\backend\server.js
---------------------------------------------
// docker/backend/server.js
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const mysql = require('mysql2/promise');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Database connections
const pgPool = new Pool({
  host: process.env.PG_HOST || 'localhost',
  port: process.env.PG_PORT || 5432,
  database: process.env.PG_DATABASE || 'kamranpgdb',
  user: process.env.PG_USER || 'kamranuser',
  password: process.env.PG_PASSWORD || 'Password123!',
});

const mysqlConfig = {
  host: process.env.MYSQL_HOST || 'localhost',
  port: process.env.MYSQL_PORT || 3306,
  database: process.env.MYSQL_DATABASE || 'kamranmysqldb',
  user: process.env.MYSQL_USER || 'kamranuser',
  password: process.env.MYSQL_PASSWORD || 'Password123!',
};

// Initialize database tables
async function initializeDatabases() {
  try {
    // PostgreSQL table
    await pgPool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // MySQL table
    const mysqlConnection = await mysql.createConnection(mysqlConfig);
    await mysqlConnection.execute(`
      CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    await mysqlConnection.end();

    console.log('Database tables initialized successfully');
  } catch (error) {
    console.error('Database initialization error:', error);
  }
}

// Routes
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

// Get all users (from PostgreSQL)
app.get('/api/users', async (req, res) => {
  try {
    const result = await pgPool.query('SELECT * FROM users ORDER BY created_at DESC');
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});

// Add new user (to PostgreSQL)
app.post('/api/users', async (req, res) => {
  const { name, email } = req.body;
  
  if (!name || !email) {
    return res.status(400).json({ error: 'Name and email are required' });
  }

  try {
    const result = await pgPool.query(
      'INSERT INTO users (name, email) VALUES ($1, $2) RETURNING *',
      [name, email]
    );
    
    // Also insert into MySQL for BI tool demonstration
    try {
      const mysqlConnection = await mysql.createConnection(mysqlConfig);
      await mysqlConnection.execute(
        'INSERT INTO users (name, email) VALUES (?, ?)',
        [name, email]
      );
      await mysqlConnection.end();
    } catch (mysqlError) {
      console.warn('MySQL insert failed (this is ok for demo):', mysqlError.message);
    }

    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('Error adding user:', error);
    if (error.code === '23505') { // Duplicate email
      res.status(409).json({ error: 'Email already exists' });
    } else {
      res.status(500).json({ error: 'Failed to add user' });
    }
  }
});

// Get users from MySQL (for BI tool)
app.get('/api/mysql/users', async (req, res) => {
  try {
    const connection = await mysql.createConnection(mysqlConfig);
    const [rows] = await connection.execute('SELECT * FROM users ORDER BY created_at DESC');
    await connection.end();
    res.json(rows);
  } catch (error) {
    console.error('Error fetching MySQL users:', error);
    res.status(500).json({ error: 'Failed to fetch users from MySQL' });
  }
});

// Database stats endpoint
app.get('/api/stats', async (req, res) => {
  try {
    const pgResult = await pgPool.query('SELECT COUNT(*) as count FROM users');
    const pgCount = parseInt(pgResult.rows[0].count);

    let mysqlCount = 0;
    try {
      const mysqlConnection = await mysql.createConnection(mysqlConfig);
      const [mysqlRows] = await mysqlConnection.execute('SELECT COUNT(*) as count FROM users');
      await mysqlConnection.end();
      mysqlCount = mysqlRows[0].count;
    } catch (mysqlError) {
      console.warn('MySQL stats failed (this is ok for demo):', mysqlError.message);
    }

    res.json({
      postgresql_users: pgCount,
      mysql_users: mysqlCount,
      total_users: pgCount,
      last_updated: new Date().toISOString(),
      server_uptime: process.uptime()
    });
  } catch (error) {
    console.error('Error fetching stats:', error);
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

// Test database connections
app.get('/api/test-connections', async (req, res) => {
  const results = {
    postgresql: false,
    mysql: false,
    timestamp: new Date().toISOString()
  };

  // Test PostgreSQL
  try {
    await pgPool.query('SELECT 1');
    results.postgresql = true;
  } catch (error) {
    console.error('PostgreSQL connection test failed:', error.message);
  }

  // Test MySQL
  try {
    const mysqlConnection = await mysql.createConnection(mysqlConfig);
    await mysqlConnection.execute('SELECT 1');
    await mysqlConnection.end();
    results.mysql = true;
  } catch (error) {
    console.error('MySQL connection test failed:', error.message);
  }

  res.json(results);
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Kamran Demo API Server',
    version: '1.0.0',
    endpoints: [
      'GET /health - Health check',
      'GET /api/users - Get all users',
      'POST /api/users - Add new user',
      'GET /api/mysql/users - Get users from MySQL',
      'GET /api/stats - Get database statistics',
      'GET /api/test-connections - Test database connections'
    ],
    timestamp: new Date().toISOString()
  });
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('Unhandled error:', error);
  res.status(500).json({ 
    error: 'Internal server error',
    timestamp: new Date().toISOString()
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Route not found',
    path: req.originalUrl,
    timestamp: new Date().toISOString()
  });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully');
  await pgPool.end();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('SIGINT received, shutting down gracefully');
  await pgPool.end();
  process.exit(0);
});

// Start server
async function startServer() {
  try {
    await initializeDatabases();
    
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`🚀 Server running on port ${PORT}`);
      console.log(`📊 Health check: http://localhost:${PORT}/health`);
      console.log(`👥 Users API: http://localhost:${PORT}/api/users`);
      console.log(`📈 Stats API: http://localhost:${PORT}/api/stats`);
      console.log(`🔍 Test connections: http://localhost:${PORT}/api/test-connections`);
      console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

startServer();.
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\Dockerfile
---------------------------------------------
# Multi-stage build for React frontend
FROM node:20-alpine AS builder

WORKDIR /app
COPY package*.json ./

# Use npm install instead of npm ci
RUN npm install

COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 3000
CMD ["nginx", "-g", "daemon off;"].
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\nginx.conf
---------------------------------------------
server {
    listen 3000;
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    
    location /api/ {
        proxy_pass http://backend:5000/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}.
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\package.json
---------------------------------------------
{
  "name": "kamran-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "axios": "^1.4.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}.
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\public\index.html
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="DevOps Demo Application" />
    <title>DevOps Demo App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>.
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\src\App.css
---------------------------------------------
.App {
  text-align: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.App-header {
  padding: 2rem 0;
  background: rgba(0,0,0,0.1);
}

.App-header h1 {
  margin: 0;
  font-size: 2.5rem;
  font-weight: 700;
}

.App-header p {
  margin: 0.5rem 0 0;
  font-size: 1.1rem;
  opacity: 0.9;
}

.App-main {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.user-form {
  background: rgba(255,255,255,0.1);
  padding: 2rem;
  border-radius: 10px;
  margin-bottom: 2rem;
  backdrop-filter: blur(10px);
}

.user-form h2 {
  margin-top: 0;
}

.user-form form {
  display: flex;
  gap: 1rem;
  justify-content: center;
  flex-wrap: wrap;
}

.user-form input {
  padding: 0.75rem;
  border: none;
  border-radius: 5px;
  font-size: 1rem;
  min-width: 200px;
}

.user-form button {
  padding: 0.75rem 1.5rem;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s;
}

.user-form button:hover:not(:disabled) {
  background: #45a049;
}

.user-form button:disabled {
  background: #cccccc;
  cursor: not-allowed;
}

.user-list {
  margin-bottom: 2rem;
}

.users-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
}

.user-card {
  background: rgba(255,255,255,0.1);
  padding: 1.5rem;
  border-radius: 10px;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255,255,255,0.1);
}

.user-card h3 {
  margin: 0 0 0.5rem;
  color: #fff;
}

.user-card p {
  margin: 0 0 0.5rem;
  opacity: 0.9;
}

.user-card small {
  opacity: 0.7;
  font-size: 0.8rem;
}

.stats {
  background: rgba(255,255,255,0.1);
  padding: 2rem;
  border-radius: 10px;
  backdrop-filter: blur(10px);
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
}

.stat-card {
  background: rgba(255,255,255,0.1);
  padding: 1rem;
  border-radius: 8px;
  border: 1px solid rgba(255,255,255,0.1);
}

.stat-card h3 {
  margin: 0 0 0.5rem;
  font-size: 1rem;
}

.stat-card p {
  margin: 0;
  font-weight: bold;
  color: #4CAF50;
}

@media (max-width: 768px) {
  .App-main {
    padding: 1rem;
  }
  
  .user-form form {
    flex-direction: column;
    align-items: center;
  }
  
  .users-grid {
    grid-template-columns: 1fr;
  }
}.
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\src\App.js
---------------------------------------------
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

function App() {
  const [users, setUsers] = useState([]);
  const [newUser, setNewUser] = useState({ name: '', email: '' });
  const [loading, setLoading] = useState(false);

  const API_URL = process.env.REACT_APP_API_URL || '';

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${API_URL}/api/users`);
      setUsers(response.data);
    } catch (error) {
      console.error('Error fetching users:', error);
    } finally {
      setLoading(false);
    }
  };

  const addUser = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      await axios.post(`${API_URL}/api/users`, newUser);
      setNewUser({ name: '', email: '' });
      fetchUsers();
    } catch (error) {
      console.error('Error adding user:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Kamran Demo Application</h1>
        <p>Full-Stack Application with Auto Scaling, Load Balancer & RDS</p>
      </header>

      <main className="App-main">
        <section className="user-form">
          <h2>Add New User</h2>
          <form onSubmit={addUser}>
            <input
              type="text"
              placeholder="Name"
              value={newUser.name}
              onChange={(e) => setNewUser({...newUser, name: e.target.value})}
              required
            />
            <input
              type="email"
              placeholder="Email"
              value={newUser.email}
              onChange={(e) => setNewUser({...newUser, email: e.target.value})}
              required
            />
            <button type="submit" disabled={loading}>
              {loading ? 'Adding...' : 'Add User'}
            </button>
          </form>
        </section>

        <section className="user-list">
          <h2>Users ({users.length})</h2>
          {loading ? (
            <p>Loading...</p>
          ) : (
            <div className="users-grid">
              {users.map((user) => (
                <div key={user.id} className="user-card">
                  <h3>{user.name}</h3>
                  <p>{user.email}</p>
                  <small>Added: {new Date(user.created_at).toLocaleDateString()}</small>
                </div>
              ))}
            </div>
          )}
        </section>

        <section className="stats">
          <h2>Infrastructure Status</h2>
          <div className="stats-grid">
            <div className="stat-card">
              <h3>Auto Scaling</h3>
              <p>✅ Active</p>
            </div>
            <div className="stat-card">
              <h3>Load Balancer</h3>
              <p>✅ Healthy</p>
            </div>
            <div className="stat-card">
              <h3>RDS Database</h3>
              <p>✅ Connected</p>
            </div>
            <div className="stat-card">
              <h3>SSL/HTTPS</h3>
              <p>✅ Secured</p>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}

export default App;.
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\src\index.css
---------------------------------------------
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

* {
  box-sizing: border-box;
}.
.
C:\Users\Kamran\kamran-aws-project\docker\frontend\src\index.js
---------------------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);.
.
C:\Users\Kamran\kamran-aws-project\scripts\cleanup.sh
---------------------------------------------
#!/bin/bash

# =======================================================
# AWS DevOps Infrastructure Cleanup Script
# =======================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if Terraform is installed
    if ! command -v terraform &> /dev/null; then
        print_error "Terraform is not installed."
        exit 1
    fi
    
    # Check if we're in the right directory
    if [ ! -d "terraform" ]; then
        print_error "Please run this script from the project root directory."
        exit 1
    fi
    
    # Check if Terraform state exists
    if [ ! -f "terraform/terraform.tfstate" ] && [ ! -f "terraform/.terraform/terraform.tfstate" ]; then
        print_warning "No Terraform state found. Infrastructure might already be destroyed."
        exit 0
    fi
    
    print_success "Prerequisites check passed!"
}

# Function to show current infrastructure
show_current_infrastructure() {
    print_status "Showing current infrastructure..."
    
    cd terraform
    
    # Show current state
    print_status "Current Terraform state:"
    terraform show -no-color | head -20
    
    echo ""
    print_status "Current resources:"
    terraform state list
    
    cd ..
}

# Function to confirm destruction
confirm_destruction() {
    echo ""
    print_warning "⚠️  WARNING: This will destroy ALL infrastructure resources!"
    print_warning "This includes:"
    echo "   • EC2 instances and Auto Scaling Groups"
    echo "   • RDS databases (with all data)"
    echo "   • Load Balancers and Target Groups"
    echo "   • VPC and networking components"
    echo "   • Route53 records"
    echo "   • SSL certificates"
    echo ""
    print_error "💥 THIS ACTION CANNOT BE UNDONE!"
    echo ""
    
    # Multiple confirmations for safety
    print_warning "Type 'yes' to confirm destruction:"
    read -r response1
    
    if [ "$response1" != "yes" ]; then
        print_status "Cleanup cancelled."
        exit 0
    fi
    
    print_warning "Are you absolutely sure? Type 'destroy' to confirm:"
    read -r response2
    
    if [ "$response2" != "destroy" ]; then
        print_status "Cleanup cancelled."
        exit 0
    fi
    
    print_status "Proceeding with infrastructure destruction..."
}

# Function to destroy infrastructure
destroy_infrastructure() {
    print_status "Destroying infrastructure..."
    
    cd terraform
    
    # Show destruction plan
    print_status "Generating destruction plan..."
    terraform plan -destroy -out=destroy.tfplan
    
    # Apply destruction
    print_status "Destroying resources..."
    terraform apply destroy.tfplan
    
    # Clean up plan files
    rm -f destroy.tfplan tfplan
    
    cd ..
    print_success "Infrastructure destruction completed!"
}

# Function to verify cleanup
verify_cleanup() {
    print_status "Verifying cleanup..."
    
    cd terraform
    
    # Check if any resources remain
    REMAINING_RESOURCES=$(terraform state list | wc -l)
    
    if [ "$REMAINING_RESOURCES" -eq 0 ]; then
        print_success "All resources have been successfully destroyed!"
    else
        print_warning "Some resources might still exist:"
        terraform state list
        print_warning "You may need to check AWS Console for any remaining resources."
    fi
    
    cd ..
}

# Function to clean up local files
cleanup_local_files() {
    print_status "Cleaning up local files..."
    
    cd terraform
    
    # Remove state backup files
    rm -f terraform.tfstate.backup*
    
    # Remove plan files
    rm -f *.tfplan
    
    # Keep .terraform directory as it contains provider cache
    # Users can run 'terraform init' again if needed
    
    cd ..
    
    print_success "Local cleanup completed!"
}

# Function to show post-cleanup info
show_post_cleanup_info() {
    echo ""
    print_success "🧹 Cleanup completed successfully!"
    echo ""
    print_status "What was cleaned up:"
    echo "✅ All AWS infrastructure resources destroyed"
    echo "✅ Terraform state cleaned"
    echo "✅ Local temporary files removed"
    echo ""
    print_status "Next steps:"
    echo "• Check AWS Console to verify all resources are gone"
    echo "• Review AWS billing to ensure no unexpected charges"
    echo "• Keep your code for future deployments"
    echo ""
    print_success "💰 You should no longer be charged for these AWS resources!"
}

# Main cleanup function
main() {
    echo ""
    print_status "🧹 AWS DevOps Infrastructure Cleanup"
    print_status "====================================="
    echo ""
    
    # Record start time
    START_TIME=$(date +%s)
    
    # Run cleanup steps
    check_prerequisites
    show_current_infrastructure
    confirm_destruction
    destroy_infrastructure
    verify_cleanup
    cleanup_local_files
    show_post_cleanup_info
    
    # Calculate cleanup time
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    echo ""
    print_success "Total cleanup time: ${DURATION} seconds"
}

# Handle Ctrl+C gracefully
trap 'echo ""; print_warning "Cleanup interrupted by user."; exit 1' INT

# Run main function
main "$@".
.
C:\Users\Kamran\kamran-aws-project\scripts\deploy.sh
---------------------------------------------
#!/bin/bash

# =======================================================
# AWS DevOps Infrastructure Deployment Script
# =======================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if AWS CLI is installed and configured
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check if Terraform is installed
    if ! command -v terraform &> /dev/null; then
        print_error "Terraform is not installed. Please install it first."
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials not configured. Run 'aws configure' first."
        exit 1
    fi
    
    # Check if we're in the right directory
    if [ ! -d "terraform" ]; then
        print_error "Please run this script from the project root directory."
        exit 1
    fi
    
    print_success "Prerequisites check passed!"
}

# Function to validate Terraform configuration
validate_terraform() {
    print_status "Validating Terraform configuration..."
    
    cd terraform
    
    # Initialize Terraform
    print_status "Initializing Terraform..."
    terraform init
    
    # Validate configuration
    print_status "Validating Terraform configuration..."
    terraform validate
    
    # Format check
    print_status "Checking Terraform formatting..."
    terraform fmt -check || {
        print_warning "Terraform files need formatting. Running 'terraform fmt'..."
        terraform fmt
    }
    
    cd ..
    print_success "Terraform validation completed!"
}

# Function to deploy infrastructure
deploy_infrastructure() {
    print_status "Starting infrastructure deployment..."
    
    cd terraform
    
    # Show deployment plan
    print_status "Generating deployment plan..."
    terraform plan -out=tfplan
    
    # Ask for confirmation
    echo ""
    print_warning "Review the plan above. Do you want to proceed with deployment? (y/N)"
    read -r response
    
    case "$response" in
        [yY][eE][sS]|[yY]) 
            print_status "Deploying infrastructure..."
            terraform apply tfplan
            ;;
        *)
            print_warning "Deployment cancelled by user."
            exit 0
            ;;
    esac
    
    cd ..
    print_success "Infrastructure deployment completed!"
}

# Function to show deployment outputs
show_outputs() {
    print_status "Retrieving deployment outputs..."
    
    cd terraform
    
    echo ""
    print_success "=== DEPLOYMENT OUTPUTS ==="
    terraform output
    
    echo ""
    print_success "=== ACCESS URLS ==="
    APP_URL=$(terraform output -raw app_url 2>/dev/null || echo "Not available")
    BI_URL=$(terraform output -raw bi_tool_url 2>/dev/null || echo "Not available")
    ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "Not available")
    
    echo "Application URL: $APP_URL"
    echo "BI Tool URL: $BI_URL"
    echo "Load Balancer DNS: $ALB_DNS"
    
    cd ..
}

# Function to verify deployment
verify_deployment() {
    print_status "Verifying deployment..."
    
    cd terraform
    
    # Get ALB DNS name
    ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
    
    if [ -n "$ALB_DNS" ]; then
        print_status "Testing application health..."
        
        # Wait a bit for services to start
        sleep 30
        
        # Test health endpoint
        if curl -s "http://$ALB_DNS/health" > /dev/null; then
            print_success "Application is responding!"
        else
            print_warning "Application might still be starting up. Check back in a few minutes."
        fi
    fi
    
    cd ..
}

# Main deployment function
main() {
    echo ""
    print_status "🚀 AWS DevOps Infrastructure Deployment"
    print_status "========================================"
    echo ""
    
    # Record start time
    START_TIME=$(date +%s)
    
    # Run deployment steps
    check_prerequisites
    validate_terraform
    deploy_infrastructure
    show_outputs
    verify_deployment
    
    # Calculate deployment time
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    echo ""
    print_success "🎉 Deployment completed successfully!"
    print_success "Total deployment time: ${DURATION} seconds"
    echo ""
    print_status "Next steps:"
    echo "1. Wait 5-10 minutes for all services to fully start"
    echo "2. Test the application URLs shown above"
    echo "3. Set up SSH tunnels for database access (see scripts/setup-tunnel.sh)"
    echo "4. Configure BI tool dashboards"
    echo ""
    print_warning "💰 Remember to run './scripts/cleanup.sh' when done to avoid AWS charges!"
}

# Run main function
main "$@".
.
C:\Users\Kamran\kamran-aws-project\scripts\test-local.sh
---------------------------------------------
#!/bin/bash

# =======================================================
# Local Docker Application Testing Script
# =======================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    # Check if Docker Compose is installed
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info &> /dev/null; then
        print_error "Docker is not running. Please start Docker first."
        exit 1
    fi
    
    # Check if we're in the right directory
    if [ ! -d "docker" ]; then
        print_error "Please run this script from the project root directory."
        exit 1
    fi
    
    print_success "Prerequisites check passed!"
}

# Function to build and start containers
start_containers() {
    print_status "Building and starting Docker containers..."
    
    cd docker
    
    # Stop any existing containers
    print_status "Stopping any existing containers..."
    docker-compose down 2>/dev/null || true
    
    # Build and start containers
    print_status "Building containers..."
    docker-compose build
    
    print_status "Starting containers..."
    docker-compose up -d
    
    cd ..
    print_success "Containers started successfully!"
}

# Function to wait for services
wait_for_services() {
    print_status "Waiting for services to start..."
    
    # Wait for backend to be ready
    print_status "Waiting for backend service..."
    for i in {1..30}; do
        if curl -s http://localhost:5000/health > /dev/null 2>&1; then
            print_success "Backend service is ready!"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Backend service failed to start within 30 seconds"
            return 1
        fi
        sleep 1
        echo -n "."
    done
    
    # Wait for frontend to be ready
    print_status "Waiting for frontend service..."
    for i in {1..30}; do
        if curl -s http://localhost:3000 > /dev/null 2>&1; then
            print_success "Frontend service is ready!"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Frontend service failed to start within 30 seconds"
            return 1
        fi
        sleep 1
        echo -n "."
    done
}

# Function to test application endpoints
test_endpoints() {
    print_status "Testing application endpoints..."
    
    # Test backend health
    print_status "Testing backend health endpoint..."
    HEALTH_RESPONSE=$(curl -s http://localhost:5000/health)
    if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
        print_success "✅ Backend health check passed"
    else
        print_error "❌ Backend health check failed"
        echo "Response: $HEALTH_RESPONSE"
    fi
    
    # Test frontend
    print_status "Testing frontend..."
    if curl -s http://localhost:3000 | grep -q "DevOps Demo"; then
        print_success "✅ Frontend is serving content"
    else
        print_warning "⚠️  Frontend might not be fully loaded"
    fi
    
    # Test API endpoints
    print_status "Testing API endpoints..."
    
    # Test users endpoint
    USERS_RESPONSE=$(curl -s http://localhost:5000/api/users)
    if echo "$USERS_RESPONSE" | grep -q "\[\]" || echo "$USERS_RESPONSE" | grep -q "id"; then
        print_success "✅ Users API endpoint working"
    else
        print_warning "⚠️  Users API might have issues"
        echo "Response: $USERS_RESPONSE"
    fi
    
    # Test stats endpoint
    STATS_RESPONSE=$(curl -s http://localhost:5000/api/stats)
    if echo "$STATS_RESPONSE" | grep -q "total_users"; then
        print_success "✅ Stats API endpoint working"
    else
        print_warning "⚠️  Stats API might have issues"
        echo "Response: $STATS_RESPONSE"
    fi
}

# Function to show container status
show_container_status() {
    print_status "Container status:"
    
    cd docker
    docker-compose ps
    cd ..
    
    print_status "Container logs (last 10 lines):"
    echo "=== Backend Logs ==="
    cd docker
    docker-compose logs --tail=10 backend
    echo ""
    echo "=== Frontend Logs ==="
    docker-compose logs --tail=10 frontend
    cd ..
}

# Function to show access information
show_access_info() {
    echo ""
    print_success "🎉 Local testing completed!"
    echo ""
    print_status "Access your application:"
    echo "🌐 Frontend: http://localhost:3000"
    echo "⚙️  Backend API: http://localhost:5000"
    echo "❤️  Health Check: http://localhost:5000/health"
    echo "👥 Users API: http://localhost:5000/api/users"
    echo "📊 Stats API: http://localhost:5000/api/stats"
    echo ""
    print_status "To stop the application:"
    echo "cd docker && docker-compose down"
    echo ""
    print_warning "Note: Database connections will fail locally unless you have"
    print_warning "PostgreSQL and MySQL running with the expected credentials."
}

# Function to cleanup on exit
cleanup() {
    if [ "$1" = "stop" ]; then
        print_status "Stopping containers..."
        cd docker 2>/dev/null && docker-compose down 2>/dev/null || true
        print_success "Containers stopped."
    fi
}

# Main testing function
main() {
    echo ""
    print_status "🧪 Local Docker Application Testing"
    print_status "===================================="
    echo ""
    
    # Handle command line arguments
    case "${1:-}" in
        "stop")
            cleanup stop
            exit 0
            ;;
        "logs")
            cd docker && docker-compose logs
            exit 0
            ;;
        "status")
            cd docker && docker-compose ps
            exit 0
            ;;
    esac
    
    # Record start time
    START_TIME=$(date +%s)
    
    # Run testing steps
    check_prerequisites
    start_containers
    wait_for_services
    test_endpoints
    show_container_status
    show_access_info
    
    # Calculate testing time
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    echo ""
    print_success "Total testing time: ${DURATION} seconds"
    echo ""
    print_status "Usage:"
    echo "./scripts/test-local.sh        # Run full test"
    echo "./scripts/test-local.sh stop   # Stop containers"
    echo "./scripts/test-local.sh logs   # Show logs"
    echo "./scripts/test-local.sh status # Show status"
}

# Handle Ctrl+C gracefully
trap 'echo ""; print_warning "Testing interrupted by user."; cleanup stop; exit 1' INT

# Run main function
main "$@".
.
C:\Users\Kamran\kamran-aws-project\user_data\app_userdata.sh
---------------------------------------------
#!/bin/bash

# Update system and install required packages (AL2023 uses dnf)
sudo dnf update -y
sudo dnf install -y nginx docker git

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Install Node.js 20
curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
sudo dnf install -y nodejs

# Enable and start services
sudo systemctl enable nginx docker
sudo systemctl start nginx docker

# Add ec2-user to docker group
sudo usermod -aG docker ec2-user

# Wait for services to start
sleep 10

# Clone the repository
cd /home/ec2-user
sudo git clone ${github_repo} app || {
    echo "Git clone failed, creating placeholder app"
    sudo mkdir -p app/docker
    sudo chown -R ec2-user:ec2-user app
    exit 0
}
sudo chown -R ec2-user:ec2-user app

# Navigate to docker directory
cd /home/ec2-user/app/docker

# Create environment file for Docker Compose
cat <<EOF > .env
PG_HOST=${pg_host}
PG_PORT=5432
PG_DATABASE=${pg_database}
PG_USER=${pg_user}
PG_PASSWORD=${pg_password}
MYSQL_HOST=${mysql_host}
MYSQL_PORT=3306
MYSQL_DATABASE=${mysql_database}
MYSQL_USER=${mysql_user}
MYSQL_PASSWORD=${mysql_password}
REACT_APP_API_URL=/api
EOF

# Wait for Docker to be ready
sleep 30

# Build and run the application
sudo -u ec2-user docker-compose up -d

# Wait for containers to start
sleep 60

# Configure Nginx as reverse proxy
cat <<EOF | sudo tee /etc/nginx/conf.d/app.conf
server {
    listen 80 default_server;
    server_name _;

    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /api/ {
        proxy_pass http://127.0.0.1:5000/api/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /health {
        proxy_pass http://127.0.0.1:5000/health;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}
EOF

# Remove default nginx config
sudo rm -f /etc/nginx/conf.d/default.conf

# Restart Nginx
sudo systemctl restart nginx

# Log status for debugging
echo "=== Docker Status ===" >> /var/log/user-data.log
sudo docker ps >> /var/log/user-data.log
echo "=== Docker Logs ===" >> /var/log/user-data.log
sudo docker-compose logs >> /var/log/user-data.log.
.
C:\Users\Kamran\kamran-aws-project\user_data\bi_userdata.sh
---------------------------------------------
#!/bin/bash

# Update system and install required packages
sudo yum update -y
sudo yum install -y docker git

# Install Node.js 20
curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
sudo yum install -y nodejs

# Enable and start Docker
sudo systemctl enable docker
sudo systemctl start docker

# Add ec2-user to docker group
sudo usermod -aG docker ec2-user

# Create directory for Metabase
sudo mkdir -p /opt/metabase
sudo chown ec2-user:ec2-user /opt/metabase

# Wait for Docker to be ready
sleep 30

# Run Metabase container
sudo docker run -d \
  --name metabase \
  -p 5000:3000 \
  -e MB_DB_TYPE=postgres \
  -e MB_DB_DBNAME=kamranpgdb \
  -e MB_DB_PORT=5432 \
  -e MB_DB_USER=${db_username} \
  -e MB_DB_PASS=${db_password} \
  -e MB_DB_HOST=${db_host} \
  metabase/metabase

# Install PostgreSQL client for debugging
sudo yum install -y postgresql.
.
